/* This file is autogenerated. DO NOT CHANGE. All changes will be lost */

#include "message_transmit.qpb.h"
#include <QtProtobuf/qprotobufserializer.h>
#include <cmath>

namespace bite_im {

class NewMessageReq_QtProtobufData : public QSharedData
{
public:
    NewMessageReq_QtProtobufData()
        : QSharedData(),
          m_message(nullptr)
    {
    }

    NewMessageReq_QtProtobufData(const NewMessageReq_QtProtobufData &other)
        : QSharedData(other),
          m_requestId(other.m_requestId),
          m_userId(other.m_userId),
          m_sessionId(other.m_sessionId),
          m_chatSessionId(other.m_chatSessionId),
          m_message(other.m_message
                                               ? new MessageContent(*other.m_message)
                                               : nullptr)
    {
    }

    QString m_requestId;
    std::optional<QString> m_userId;
    std::optional<QString> m_sessionId;
    QString m_chatSessionId;
    QtProtobufPrivate::QProtobufLazyMessagePointer<MessageContent> m_message;
};

NewMessageReq::~NewMessageReq() = default;

static constexpr struct {
    QtProtobufPrivate::QProtobufPropertyOrdering::Data data;
    const std::array<uint, 21> qt_protobuf_NewMessageReq_uint_data;
    const char qt_protobuf_NewMessageReq_char_data[72];
} qt_protobuf_NewMessageReq_metadata {
    // data
    {
        0, /* = version */
        5, /* = num fields */
        6, /* = field number offset */
        11, /* = property index offset */
        16, /* = field flags offset */
        21, /* = message full name length */
    },
    // uint_data
    {
        // JSON name offsets:
        22, /* = requestId */
        32, /* = userId */
        39, /* = sessionId */
        49, /* = chatSessionId */
        63, /* = message */
        71, /* = end-of-string-marker */
        // Field numbers:
        1, /* = requestId */
        2, /* = userId */
        3, /* = sessionId */
        4, /* = chatSessionId */
        5, /* = message */
        // Property indices:
        0, /* = requestId */
        1, /* = userId */
        3, /* = sessionId */
        5, /* = chatSessionId */
        6, /* = message */
        // Field flags:
        QtProtobufPrivate::NoFlags, /* = requestId */
        QtProtobufPrivate::Optional, /* = userId */
        QtProtobufPrivate::Optional, /* = sessionId */
        QtProtobufPrivate::NoFlags, /* = chatSessionId */
        QtProtobufPrivate::NoFlags, /* = message */
    },
    // char_data
    /* metadata char_data: */
    "bite_im.NewMessageReq\0" /* = full message name */
    /* field char_data: */
    "requestId\0userId\0sessionId\0chatSessionId\0message\0"
};

const QtProtobufPrivate::QProtobufPropertyOrdering NewMessageReq::propertyOrdering = {
    &qt_protobuf_NewMessageReq_metadata.data
};

void NewMessageReq::registerTypes()
{
    qRegisterMetaType<NewMessageReq>();
    qRegisterMetaType<NewMessageReqRepeated>();
}

NewMessageReq::NewMessageReq()
    : QProtobufMessage(&NewMessageReq::staticMetaObject),
      dptr(new NewMessageReq_QtProtobufData)
{
}

NewMessageReq::NewMessageReq(const NewMessageReq &other)
    : QProtobufMessage(other),
      dptr(other.dptr)
{
}
NewMessageReq &NewMessageReq::operator =(const NewMessageReq &other)
{
    QProtobufMessage::operator=(other);
    dptr = other.dptr;
    return *this;
}
NewMessageReq::NewMessageReq(NewMessageReq &&other) noexcept
    : QProtobufMessage(std::move(other)),
      dptr(std::move(other.dptr))
{
}
NewMessageReq &NewMessageReq::operator =(NewMessageReq &&other) noexcept
{
    QProtobufMessage::operator=(std::move(other));
    dptr.swap(other.dptr);
    return *this;
}
bool NewMessageReq::operator ==(const NewMessageReq &other) const
{
    return QProtobufMessage::isEqual(*this, other)
        && dptr->m_requestId == other.dptr->m_requestId
        && dptr->m_userId == other.dptr->m_userId
        && dptr->m_sessionId == other.dptr->m_sessionId
        && dptr->m_chatSessionId == other.dptr->m_chatSessionId
        && (dptr->m_message == other.dptr->m_message
            || *dptr->m_message == *other.dptr->m_message);
}

bool NewMessageReq::operator !=(const NewMessageReq &other) const
{
    return !this->operator ==(other);
}

QString NewMessageReq::requestId() const
{
    return dptr->m_requestId;
}

QString NewMessageReq::userId_p() const
{
    return dptr->m_userId ?
        dptr->m_userId.value() : QString();
}

bool NewMessageReq::hasUserId() const
{
    return dptr->m_userId.has_value();
}
QString NewMessageReq::userId() const
{
    Q_ASSERT(dptr->m_userId.has_value());
    return dptr->m_userId.value();
}

QString NewMessageReq::sessionId_p() const
{
    return dptr->m_sessionId ?
        dptr->m_sessionId.value() : QString();
}

bool NewMessageReq::hasSessionId() const
{
    return dptr->m_sessionId.has_value();
}
QString NewMessageReq::sessionId() const
{
    Q_ASSERT(dptr->m_sessionId.has_value());
    return dptr->m_sessionId.value();
}

QString NewMessageReq::chatSessionId() const
{
    return dptr->m_chatSessionId;
}

MessageContent *NewMessageReq::message_p() const
{
    return dptr->m_message ? dptr->m_message.get() : nullptr;
}

bool NewMessageReq::hasMessage() const
{
    return dptr->m_message.operator bool();
}

MessageContent &NewMessageReq::message()
{
    dptr.detach();
    return *dptr->m_message;
}
const MessageContent &NewMessageReq::message() const
{
    return *dptr->m_message;
}

void NewMessageReq::clearMessage()
{
    if (dptr->m_message) {
        dptr.detach();
        dptr->m_message.reset();
    }
}

void NewMessageReq::setRequestId(const QString &requestId)
{
    if (dptr->m_requestId != requestId) {
        dptr.detach();
        dptr->m_requestId = requestId;
    }
}

void NewMessageReq::setUserId(const QString &userId)
{
    if (!dptr->m_userId || dptr->m_userId.value() != userId) {
        dptr.detach();
        dptr->m_userId = userId;
    }
}

void NewMessageReq::setUserId_p(QString userId)
{
    if (!dptr->m_userId || dptr->m_userId != userId) {
        dptr.detach();
        dptr->m_userId = userId;
    }
}

void NewMessageReq::clearUserId()
{
    if (dptr->m_userId.has_value()) {
        dptr.detach();
        dptr->m_userId.reset();
    }
}
void NewMessageReq::setSessionId(const QString &sessionId)
{
    if (!dptr->m_sessionId || dptr->m_sessionId.value() != sessionId) {
        dptr.detach();
        dptr->m_sessionId = sessionId;
    }
}

void NewMessageReq::setSessionId_p(QString sessionId)
{
    if (!dptr->m_sessionId || dptr->m_sessionId != sessionId) {
        dptr.detach();
        dptr->m_sessionId = sessionId;
    }
}

void NewMessageReq::clearSessionId()
{
    if (dptr->m_sessionId.has_value()) {
        dptr.detach();
        dptr->m_sessionId.reset();
    }
}
void NewMessageReq::setChatSessionId(const QString &chatSessionId)
{
    if (dptr->m_chatSessionId != chatSessionId) {
        dptr.detach();
        dptr->m_chatSessionId = chatSessionId;
    }
}

void NewMessageReq::setMessage_p(MessageContent *message)
{
    if (dptr->m_message.get() != message) {
        dptr.detach();
        dptr->m_message.reset(message);
    }
}

void NewMessageReq::setMessage(const MessageContent &message)
{
    if (*dptr->m_message != message) {
        dptr.detach();
        *dptr->m_message = message;
    }
}


class NewMessageRsp_QtProtobufData : public QSharedData
{
public:
    NewMessageRsp_QtProtobufData()
        : QSharedData(),
          m_success(false)
    {
    }

    NewMessageRsp_QtProtobufData(const NewMessageRsp_QtProtobufData &other)
        : QSharedData(other),
          m_requestId(other.m_requestId),
          m_success(other.m_success),
          m_errmsg(other.m_errmsg)
    {
    }

    QString m_requestId;
    bool m_success;
    QString m_errmsg;
};

NewMessageRsp::~NewMessageRsp() = default;

static constexpr struct {
    QtProtobufPrivate::QProtobufPropertyOrdering::Data data;
    const std::array<uint, 13> qt_protobuf_NewMessageRsp_uint_data;
    const char qt_protobuf_NewMessageRsp_char_data[48];
} qt_protobuf_NewMessageRsp_metadata {
    // data
    {
        0, /* = version */
        3, /* = num fields */
        4, /* = field number offset */
        7, /* = property index offset */
        10, /* = field flags offset */
        21, /* = message full name length */
    },
    // uint_data
    {
        // JSON name offsets:
        22, /* = requestId */
        32, /* = success */
        40, /* = errmsg */
        47, /* = end-of-string-marker */
        // Field numbers:
        1, /* = requestId */
        2, /* = success */
        3, /* = errmsg */
        // Property indices:
        0, /* = requestId */
        1, /* = success */
        2, /* = errmsg */
        // Field flags:
        QtProtobufPrivate::NoFlags, /* = requestId */
        QtProtobufPrivate::NoFlags, /* = success */
        QtProtobufPrivate::NoFlags, /* = errmsg */
    },
    // char_data
    /* metadata char_data: */
    "bite_im.NewMessageRsp\0" /* = full message name */
    /* field char_data: */
    "requestId\0success\0errmsg\0"
};

const QtProtobufPrivate::QProtobufPropertyOrdering NewMessageRsp::propertyOrdering = {
    &qt_protobuf_NewMessageRsp_metadata.data
};

void NewMessageRsp::registerTypes()
{
    qRegisterMetaType<NewMessageRsp>();
    qRegisterMetaType<NewMessageRspRepeated>();
}

NewMessageRsp::NewMessageRsp()
    : QProtobufMessage(&NewMessageRsp::staticMetaObject),
      dptr(new NewMessageRsp_QtProtobufData)
{
}

NewMessageRsp::NewMessageRsp(const NewMessageRsp &other)
    : QProtobufMessage(other),
      dptr(other.dptr)
{
}
NewMessageRsp &NewMessageRsp::operator =(const NewMessageRsp &other)
{
    QProtobufMessage::operator=(other);
    dptr = other.dptr;
    return *this;
}
NewMessageRsp::NewMessageRsp(NewMessageRsp &&other) noexcept
    : QProtobufMessage(std::move(other)),
      dptr(std::move(other.dptr))
{
}
NewMessageRsp &NewMessageRsp::operator =(NewMessageRsp &&other) noexcept
{
    QProtobufMessage::operator=(std::move(other));
    dptr.swap(other.dptr);
    return *this;
}
bool NewMessageRsp::operator ==(const NewMessageRsp &other) const
{
    return QProtobufMessage::isEqual(*this, other)
        && dptr->m_requestId == other.dptr->m_requestId
        && dptr->m_success == other.dptr->m_success
        && dptr->m_errmsg == other.dptr->m_errmsg;
}

bool NewMessageRsp::operator !=(const NewMessageRsp &other) const
{
    return !this->operator ==(other);
}

QString NewMessageRsp::requestId() const
{
    return dptr->m_requestId;
}

bool NewMessageRsp::success() const
{
    return dptr->m_success;
}

QString NewMessageRsp::errmsg() const
{
    return dptr->m_errmsg;
}

void NewMessageRsp::setRequestId(const QString &requestId)
{
    if (dptr->m_requestId != requestId) {
        dptr.detach();
        dptr->m_requestId = requestId;
    }
}

void NewMessageRsp::setSuccess(const bool &success)
{
    if (dptr->m_success != success) {
        dptr.detach();
        dptr->m_success = success;
    }
}

void NewMessageRsp::setErrmsg(const QString &errmsg)
{
    if (dptr->m_errmsg != errmsg) {
        dptr.detach();
        dptr->m_errmsg = errmsg;
    }
}


class GetTransmitTargetRsp_QtProtobufData : public QSharedData
{
public:
    GetTransmitTargetRsp_QtProtobufData()
        : QSharedData(),
          m_success(false),
          m_message(nullptr)
    {
    }

    GetTransmitTargetRsp_QtProtobufData(const GetTransmitTargetRsp_QtProtobufData &other)
        : QSharedData(other),
          m_requestId(other.m_requestId),
          m_success(other.m_success),
          m_errmsg(other.m_errmsg),
          m_message(other.m_message
                                               ? new MessageInfo(*other.m_message)
                                               : nullptr),
          m_targetIdList(other.m_targetIdList)
    {
    }

    QString m_requestId;
    bool m_success;
    QString m_errmsg;
    QtProtobufPrivate::QProtobufLazyMessagePointer<MessageInfo> m_message;
    QStringList m_targetIdList;
};

GetTransmitTargetRsp::~GetTransmitTargetRsp() = default;

static constexpr struct {
    QtProtobufPrivate::QProtobufPropertyOrdering::Data data;
    const std::array<uint, 21> qt_protobuf_GetTransmitTargetRsp_uint_data;
    const char qt_protobuf_GetTransmitTargetRsp_char_data[76];
} qt_protobuf_GetTransmitTargetRsp_metadata {
    // data
    {
        0, /* = version */
        5, /* = num fields */
        6, /* = field number offset */
        11, /* = property index offset */
        16, /* = field flags offset */
        28, /* = message full name length */
    },
    // uint_data
    {
        // JSON name offsets:
        29, /* = requestId */
        39, /* = success */
        47, /* = errmsg */
        54, /* = message */
        62, /* = targetIdList */
        75, /* = end-of-string-marker */
        // Field numbers:
        1, /* = requestId */
        2, /* = success */
        3, /* = errmsg */
        4, /* = message */
        5, /* = targetIdList */
        // Property indices:
        0, /* = requestId */
        1, /* = success */
        2, /* = errmsg */
        3, /* = message */
        4, /* = targetIdList */
        // Field flags:
        QtProtobufPrivate::NoFlags, /* = requestId */
        QtProtobufPrivate::NoFlags, /* = success */
        QtProtobufPrivate::NoFlags, /* = errmsg */
        QtProtobufPrivate::NoFlags, /* = message */
        QtProtobufPrivate::NoFlags, /* = targetIdList */
    },
    // char_data
    /* metadata char_data: */
    "bite_im.GetTransmitTargetRsp\0" /* = full message name */
    /* field char_data: */
    "requestId\0success\0errmsg\0message\0targetIdList\0"
};

const QtProtobufPrivate::QProtobufPropertyOrdering GetTransmitTargetRsp::propertyOrdering = {
    &qt_protobuf_GetTransmitTargetRsp_metadata.data
};

void GetTransmitTargetRsp::registerTypes()
{
    qRegisterMetaType<GetTransmitTargetRsp>();
    qRegisterMetaType<GetTransmitTargetRspRepeated>();
}

GetTransmitTargetRsp::GetTransmitTargetRsp()
    : QProtobufMessage(&GetTransmitTargetRsp::staticMetaObject),
      dptr(new GetTransmitTargetRsp_QtProtobufData)
{
}

GetTransmitTargetRsp::GetTransmitTargetRsp(const GetTransmitTargetRsp &other)
    : QProtobufMessage(other),
      dptr(other.dptr)
{
}
GetTransmitTargetRsp &GetTransmitTargetRsp::operator =(const GetTransmitTargetRsp &other)
{
    QProtobufMessage::operator=(other);
    dptr = other.dptr;
    return *this;
}
GetTransmitTargetRsp::GetTransmitTargetRsp(GetTransmitTargetRsp &&other) noexcept
    : QProtobufMessage(std::move(other)),
      dptr(std::move(other.dptr))
{
}
GetTransmitTargetRsp &GetTransmitTargetRsp::operator =(GetTransmitTargetRsp &&other) noexcept
{
    QProtobufMessage::operator=(std::move(other));
    dptr.swap(other.dptr);
    return *this;
}
bool GetTransmitTargetRsp::operator ==(const GetTransmitTargetRsp &other) const
{
    return QProtobufMessage::isEqual(*this, other)
        && dptr->m_requestId == other.dptr->m_requestId
        && dptr->m_success == other.dptr->m_success
        && dptr->m_errmsg == other.dptr->m_errmsg
        && (dptr->m_message == other.dptr->m_message
            || *dptr->m_message == *other.dptr->m_message)
        && dptr->m_targetIdList == other.dptr->m_targetIdList;
}

bool GetTransmitTargetRsp::operator !=(const GetTransmitTargetRsp &other) const
{
    return !this->operator ==(other);
}

QString GetTransmitTargetRsp::requestId() const
{
    return dptr->m_requestId;
}

bool GetTransmitTargetRsp::success() const
{
    return dptr->m_success;
}

QString GetTransmitTargetRsp::errmsg() const
{
    return dptr->m_errmsg;
}

MessageInfo *GetTransmitTargetRsp::message_p() const
{
    return dptr->m_message ? dptr->m_message.get() : nullptr;
}

bool GetTransmitTargetRsp::hasMessage() const
{
    return dptr->m_message.operator bool();
}

MessageInfo &GetTransmitTargetRsp::message()
{
    dptr.detach();
    return *dptr->m_message;
}
const MessageInfo &GetTransmitTargetRsp::message() const
{
    return *dptr->m_message;
}

void GetTransmitTargetRsp::clearMessage()
{
    if (dptr->m_message) {
        dptr.detach();
        dptr->m_message.reset();
    }
}

QStringList GetTransmitTargetRsp::targetIdList() const
{
    return dptr->m_targetIdList;
}

QStringList &GetTransmitTargetRsp::targetIdList()
{
    dptr.detach();
    return dptr->m_targetIdList;
}

void GetTransmitTargetRsp::setRequestId(const QString &requestId)
{
    if (dptr->m_requestId != requestId) {
        dptr.detach();
        dptr->m_requestId = requestId;
    }
}

void GetTransmitTargetRsp::setSuccess(const bool &success)
{
    if (dptr->m_success != success) {
        dptr.detach();
        dptr->m_success = success;
    }
}

void GetTransmitTargetRsp::setErrmsg(const QString &errmsg)
{
    if (dptr->m_errmsg != errmsg) {
        dptr.detach();
        dptr->m_errmsg = errmsg;
    }
}

void GetTransmitTargetRsp::setMessage_p(MessageInfo *message)
{
    if (dptr->m_message.get() != message) {
        dptr.detach();
        dptr->m_message.reset(message);
    }
}

void GetTransmitTargetRsp::setMessage(const MessageInfo &message)
{
    if (*dptr->m_message != message) {
        dptr.detach();
        *dptr->m_message = message;
    }
}

void GetTransmitTargetRsp::setTargetIdList(const QStringList &targetIdList)
{
    if (dptr->m_targetIdList != targetIdList) {
        dptr.detach();
        dptr->m_targetIdList = targetIdList;
    }
}

} // namespace bite_im

#include "moc_message_transmit.qpb.cpp"
