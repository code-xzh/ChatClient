/* This file is autogenerated. DO NOT CHANGE. All changes will be lost */

#include "user.qpb.h"
#include <QtProtobuf/qprotobufserializer.h>
#include <cmath>

namespace bite_im {

class UserRegisterReq_QtProtobufData : public QSharedData
{
public:
    UserRegisterReq_QtProtobufData()
        : QSharedData()
    {
    }

    UserRegisterReq_QtProtobufData(const UserRegisterReq_QtProtobufData &other)
        : QSharedData(other),
          m_requestId(other.m_requestId),
          m_nickname(other.m_nickname),
          m_password(other.m_password),
          m_verifyCodeId(other.m_verifyCodeId),
          m_verifyCode(other.m_verifyCode)
    {
    }

    QString m_requestId;
    QString m_nickname;
    QString m_password;
    QString m_verifyCodeId;
    QString m_verifyCode;
};

UserRegisterReq::~UserRegisterReq() = default;

static constexpr struct {
    QtProtobufPrivate::QProtobufPropertyOrdering::Data data;
    const std::array<uint, 21> qt_protobuf_UserRegisterReq_uint_data;
    const char qt_protobuf_UserRegisterReq_char_data[77];
} qt_protobuf_UserRegisterReq_metadata {
    // data
    {
        0, /* = version */
        5, /* = num fields */
        6, /* = field number offset */
        11, /* = property index offset */
        16, /* = field flags offset */
        23, /* = message full name length */
    },
    // uint_data
    {
        // JSON name offsets:
        24, /* = requestId */
        34, /* = nickname */
        43, /* = password */
        52, /* = verifyCodeId */
        65, /* = verifyCode */
        76, /* = end-of-string-marker */
        // Field numbers:
        1, /* = requestId */
        2, /* = nickname */
        3, /* = password */
        4, /* = verifyCodeId */
        5, /* = verifyCode */
        // Property indices:
        0, /* = requestId */
        1, /* = nickname */
        2, /* = password */
        3, /* = verifyCodeId */
        4, /* = verifyCode */
        // Field flags:
        QtProtobufPrivate::NoFlags, /* = requestId */
        QtProtobufPrivate::NoFlags, /* = nickname */
        QtProtobufPrivate::NoFlags, /* = password */
        QtProtobufPrivate::NoFlags, /* = verifyCodeId */
        QtProtobufPrivate::NoFlags, /* = verifyCode */
    },
    // char_data
    /* metadata char_data: */
    "bite_im.UserRegisterReq\0" /* = full message name */
    /* field char_data: */
    "requestId\0nickname\0password\0verifyCodeId\0verifyCode\0"
};

const QtProtobufPrivate::QProtobufPropertyOrdering UserRegisterReq::propertyOrdering = {
    &qt_protobuf_UserRegisterReq_metadata.data
};

void UserRegisterReq::registerTypes()
{
    qRegisterMetaType<UserRegisterReq>();
    qRegisterMetaType<UserRegisterReqRepeated>();
}

UserRegisterReq::UserRegisterReq()
    : QProtobufMessage(&UserRegisterReq::staticMetaObject),
      dptr(new UserRegisterReq_QtProtobufData)
{
}

UserRegisterReq::UserRegisterReq(const UserRegisterReq &other)
    : QProtobufMessage(other),
      dptr(other.dptr)
{
}
UserRegisterReq &UserRegisterReq::operator =(const UserRegisterReq &other)
{
    QProtobufMessage::operator=(other);
    dptr = other.dptr;
    return *this;
}
UserRegisterReq::UserRegisterReq(UserRegisterReq &&other) noexcept
    : QProtobufMessage(std::move(other)),
      dptr(std::move(other.dptr))
{
}
UserRegisterReq &UserRegisterReq::operator =(UserRegisterReq &&other) noexcept
{
    QProtobufMessage::operator=(std::move(other));
    dptr.swap(other.dptr);
    return *this;
}
bool UserRegisterReq::operator ==(const UserRegisterReq &other) const
{
    return QProtobufMessage::isEqual(*this, other)
        && dptr->m_requestId == other.dptr->m_requestId
        && dptr->m_nickname == other.dptr->m_nickname
        && dptr->m_password == other.dptr->m_password
        && dptr->m_verifyCodeId == other.dptr->m_verifyCodeId
        && dptr->m_verifyCode == other.dptr->m_verifyCode;
}

bool UserRegisterReq::operator !=(const UserRegisterReq &other) const
{
    return !this->operator ==(other);
}

QString UserRegisterReq::requestId() const
{
    return dptr->m_requestId;
}

QString UserRegisterReq::nickname() const
{
    return dptr->m_nickname;
}

QString UserRegisterReq::password() const
{
    return dptr->m_password;
}

QString UserRegisterReq::verifyCodeId() const
{
    return dptr->m_verifyCodeId;
}

QString UserRegisterReq::verifyCode() const
{
    return dptr->m_verifyCode;
}

void UserRegisterReq::setRequestId(const QString &requestId)
{
    if (dptr->m_requestId != requestId) {
        dptr.detach();
        dptr->m_requestId = requestId;
    }
}

void UserRegisterReq::setNickname(const QString &nickname)
{
    if (dptr->m_nickname != nickname) {
        dptr.detach();
        dptr->m_nickname = nickname;
    }
}

void UserRegisterReq::setPassword(const QString &password)
{
    if (dptr->m_password != password) {
        dptr.detach();
        dptr->m_password = password;
    }
}

void UserRegisterReq::setVerifyCodeId(const QString &verifyCodeId)
{
    if (dptr->m_verifyCodeId != verifyCodeId) {
        dptr.detach();
        dptr->m_verifyCodeId = verifyCodeId;
    }
}

void UserRegisterReq::setVerifyCode(const QString &verifyCode)
{
    if (dptr->m_verifyCode != verifyCode) {
        dptr.detach();
        dptr->m_verifyCode = verifyCode;
    }
}


class UserRegisterRsp_QtProtobufData : public QSharedData
{
public:
    UserRegisterRsp_QtProtobufData()
        : QSharedData(),
          m_success(false)
    {
    }

    UserRegisterRsp_QtProtobufData(const UserRegisterRsp_QtProtobufData &other)
        : QSharedData(other),
          m_requestId(other.m_requestId),
          m_success(other.m_success),
          m_errmsg(other.m_errmsg)
    {
    }

    QString m_requestId;
    bool m_success;
    QString m_errmsg;
};

UserRegisterRsp::~UserRegisterRsp() = default;

static constexpr struct {
    QtProtobufPrivate::QProtobufPropertyOrdering::Data data;
    const std::array<uint, 13> qt_protobuf_UserRegisterRsp_uint_data;
    const char qt_protobuf_UserRegisterRsp_char_data[50];
} qt_protobuf_UserRegisterRsp_metadata {
    // data
    {
        0, /* = version */
        3, /* = num fields */
        4, /* = field number offset */
        7, /* = property index offset */
        10, /* = field flags offset */
        23, /* = message full name length */
    },
    // uint_data
    {
        // JSON name offsets:
        24, /* = requestId */
        34, /* = success */
        42, /* = errmsg */
        49, /* = end-of-string-marker */
        // Field numbers:
        1, /* = requestId */
        2, /* = success */
        3, /* = errmsg */
        // Property indices:
        0, /* = requestId */
        1, /* = success */
        2, /* = errmsg */
        // Field flags:
        QtProtobufPrivate::NoFlags, /* = requestId */
        QtProtobufPrivate::NoFlags, /* = success */
        QtProtobufPrivate::NoFlags, /* = errmsg */
    },
    // char_data
    /* metadata char_data: */
    "bite_im.UserRegisterRsp\0" /* = full message name */
    /* field char_data: */
    "requestId\0success\0errmsg\0"
};

const QtProtobufPrivate::QProtobufPropertyOrdering UserRegisterRsp::propertyOrdering = {
    &qt_protobuf_UserRegisterRsp_metadata.data
};

void UserRegisterRsp::registerTypes()
{
    qRegisterMetaType<UserRegisterRsp>();
    qRegisterMetaType<UserRegisterRspRepeated>();
}

UserRegisterRsp::UserRegisterRsp()
    : QProtobufMessage(&UserRegisterRsp::staticMetaObject),
      dptr(new UserRegisterRsp_QtProtobufData)
{
}

UserRegisterRsp::UserRegisterRsp(const UserRegisterRsp &other)
    : QProtobufMessage(other),
      dptr(other.dptr)
{
}
UserRegisterRsp &UserRegisterRsp::operator =(const UserRegisterRsp &other)
{
    QProtobufMessage::operator=(other);
    dptr = other.dptr;
    return *this;
}
UserRegisterRsp::UserRegisterRsp(UserRegisterRsp &&other) noexcept
    : QProtobufMessage(std::move(other)),
      dptr(std::move(other.dptr))
{
}
UserRegisterRsp &UserRegisterRsp::operator =(UserRegisterRsp &&other) noexcept
{
    QProtobufMessage::operator=(std::move(other));
    dptr.swap(other.dptr);
    return *this;
}
bool UserRegisterRsp::operator ==(const UserRegisterRsp &other) const
{
    return QProtobufMessage::isEqual(*this, other)
        && dptr->m_requestId == other.dptr->m_requestId
        && dptr->m_success == other.dptr->m_success
        && dptr->m_errmsg == other.dptr->m_errmsg;
}

bool UserRegisterRsp::operator !=(const UserRegisterRsp &other) const
{
    return !this->operator ==(other);
}

QString UserRegisterRsp::requestId() const
{
    return dptr->m_requestId;
}

bool UserRegisterRsp::success() const
{
    return dptr->m_success;
}

QString UserRegisterRsp::errmsg() const
{
    return dptr->m_errmsg;
}

void UserRegisterRsp::setRequestId(const QString &requestId)
{
    if (dptr->m_requestId != requestId) {
        dptr.detach();
        dptr->m_requestId = requestId;
    }
}

void UserRegisterRsp::setSuccess(const bool &success)
{
    if (dptr->m_success != success) {
        dptr.detach();
        dptr->m_success = success;
    }
}

void UserRegisterRsp::setErrmsg(const QString &errmsg)
{
    if (dptr->m_errmsg != errmsg) {
        dptr.detach();
        dptr->m_errmsg = errmsg;
    }
}


class UserLoginReq_QtProtobufData : public QSharedData
{
public:
    UserLoginReq_QtProtobufData()
        : QSharedData()
    {
    }

    UserLoginReq_QtProtobufData(const UserLoginReq_QtProtobufData &other)
        : QSharedData(other),
          m_requestId(other.m_requestId),
          m_nickname(other.m_nickname),
          m_password(other.m_password),
          m_verifyCodeId(other.m_verifyCodeId),
          m_verifyCode(other.m_verifyCode)
    {
    }

    QString m_requestId;
    QString m_nickname;
    QString m_password;
    QString m_verifyCodeId;
    QString m_verifyCode;
};

UserLoginReq::~UserLoginReq() = default;

static constexpr struct {
    QtProtobufPrivate::QProtobufPropertyOrdering::Data data;
    const std::array<uint, 21> qt_protobuf_UserLoginReq_uint_data;
    const char qt_protobuf_UserLoginReq_char_data[74];
} qt_protobuf_UserLoginReq_metadata {
    // data
    {
        0, /* = version */
        5, /* = num fields */
        6, /* = field number offset */
        11, /* = property index offset */
        16, /* = field flags offset */
        20, /* = message full name length */
    },
    // uint_data
    {
        // JSON name offsets:
        21, /* = requestId */
        31, /* = nickname */
        40, /* = password */
        49, /* = verifyCodeId */
        62, /* = verifyCode */
        73, /* = end-of-string-marker */
        // Field numbers:
        1, /* = requestId */
        2, /* = nickname */
        3, /* = password */
        4, /* = verifyCodeId */
        5, /* = verifyCode */
        // Property indices:
        0, /* = requestId */
        1, /* = nickname */
        2, /* = password */
        3, /* = verifyCodeId */
        4, /* = verifyCode */
        // Field flags:
        QtProtobufPrivate::NoFlags, /* = requestId */
        QtProtobufPrivate::NoFlags, /* = nickname */
        QtProtobufPrivate::NoFlags, /* = password */
        QtProtobufPrivate::NoFlags, /* = verifyCodeId */
        QtProtobufPrivate::NoFlags, /* = verifyCode */
    },
    // char_data
    /* metadata char_data: */
    "bite_im.UserLoginReq\0" /* = full message name */
    /* field char_data: */
    "requestId\0nickname\0password\0verifyCodeId\0verifyCode\0"
};

const QtProtobufPrivate::QProtobufPropertyOrdering UserLoginReq::propertyOrdering = {
    &qt_protobuf_UserLoginReq_metadata.data
};

void UserLoginReq::registerTypes()
{
    qRegisterMetaType<UserLoginReq>();
    qRegisterMetaType<UserLoginReqRepeated>();
}

UserLoginReq::UserLoginReq()
    : QProtobufMessage(&UserLoginReq::staticMetaObject),
      dptr(new UserLoginReq_QtProtobufData)
{
}

UserLoginReq::UserLoginReq(const UserLoginReq &other)
    : QProtobufMessage(other),
      dptr(other.dptr)
{
}
UserLoginReq &UserLoginReq::operator =(const UserLoginReq &other)
{
    QProtobufMessage::operator=(other);
    dptr = other.dptr;
    return *this;
}
UserLoginReq::UserLoginReq(UserLoginReq &&other) noexcept
    : QProtobufMessage(std::move(other)),
      dptr(std::move(other.dptr))
{
}
UserLoginReq &UserLoginReq::operator =(UserLoginReq &&other) noexcept
{
    QProtobufMessage::operator=(std::move(other));
    dptr.swap(other.dptr);
    return *this;
}
bool UserLoginReq::operator ==(const UserLoginReq &other) const
{
    return QProtobufMessage::isEqual(*this, other)
        && dptr->m_requestId == other.dptr->m_requestId
        && dptr->m_nickname == other.dptr->m_nickname
        && dptr->m_password == other.dptr->m_password
        && dptr->m_verifyCodeId == other.dptr->m_verifyCodeId
        && dptr->m_verifyCode == other.dptr->m_verifyCode;
}

bool UserLoginReq::operator !=(const UserLoginReq &other) const
{
    return !this->operator ==(other);
}

QString UserLoginReq::requestId() const
{
    return dptr->m_requestId;
}

QString UserLoginReq::nickname() const
{
    return dptr->m_nickname;
}

QString UserLoginReq::password() const
{
    return dptr->m_password;
}

QString UserLoginReq::verifyCodeId() const
{
    return dptr->m_verifyCodeId;
}

QString UserLoginReq::verifyCode() const
{
    return dptr->m_verifyCode;
}

void UserLoginReq::setRequestId(const QString &requestId)
{
    if (dptr->m_requestId != requestId) {
        dptr.detach();
        dptr->m_requestId = requestId;
    }
}

void UserLoginReq::setNickname(const QString &nickname)
{
    if (dptr->m_nickname != nickname) {
        dptr.detach();
        dptr->m_nickname = nickname;
    }
}

void UserLoginReq::setPassword(const QString &password)
{
    if (dptr->m_password != password) {
        dptr.detach();
        dptr->m_password = password;
    }
}

void UserLoginReq::setVerifyCodeId(const QString &verifyCodeId)
{
    if (dptr->m_verifyCodeId != verifyCodeId) {
        dptr.detach();
        dptr->m_verifyCodeId = verifyCodeId;
    }
}

void UserLoginReq::setVerifyCode(const QString &verifyCode)
{
    if (dptr->m_verifyCode != verifyCode) {
        dptr.detach();
        dptr->m_verifyCode = verifyCode;
    }
}


class UserLoginRsp_QtProtobufData : public QSharedData
{
public:
    UserLoginRsp_QtProtobufData()
        : QSharedData(),
          m_success(false)
    {
    }

    UserLoginRsp_QtProtobufData(const UserLoginRsp_QtProtobufData &other)
        : QSharedData(other),
          m_requestId(other.m_requestId),
          m_success(other.m_success),
          m_errmsg(other.m_errmsg),
          m_loginSessionId(other.m_loginSessionId)
    {
    }

    QString m_requestId;
    bool m_success;
    QString m_errmsg;
    QString m_loginSessionId;
};

UserLoginRsp::~UserLoginRsp() = default;

static constexpr struct {
    QtProtobufPrivate::QProtobufPropertyOrdering::Data data;
    const std::array<uint, 17> qt_protobuf_UserLoginRsp_uint_data;
    const char qt_protobuf_UserLoginRsp_char_data[62];
} qt_protobuf_UserLoginRsp_metadata {
    // data
    {
        0, /* = version */
        4, /* = num fields */
        5, /* = field number offset */
        9, /* = property index offset */
        13, /* = field flags offset */
        20, /* = message full name length */
    },
    // uint_data
    {
        // JSON name offsets:
        21, /* = requestId */
        31, /* = success */
        39, /* = errmsg */
        46, /* = loginSessionId */
        61, /* = end-of-string-marker */
        // Field numbers:
        1, /* = requestId */
        2, /* = success */
        3, /* = errmsg */
        4, /* = loginSessionId */
        // Property indices:
        0, /* = requestId */
        1, /* = success */
        2, /* = errmsg */
        3, /* = loginSessionId */
        // Field flags:
        QtProtobufPrivate::NoFlags, /* = requestId */
        QtProtobufPrivate::NoFlags, /* = success */
        QtProtobufPrivate::NoFlags, /* = errmsg */
        QtProtobufPrivate::NoFlags, /* = loginSessionId */
    },
    // char_data
    /* metadata char_data: */
    "bite_im.UserLoginRsp\0" /* = full message name */
    /* field char_data: */
    "requestId\0success\0errmsg\0loginSessionId\0"
};

const QtProtobufPrivate::QProtobufPropertyOrdering UserLoginRsp::propertyOrdering = {
    &qt_protobuf_UserLoginRsp_metadata.data
};

void UserLoginRsp::registerTypes()
{
    qRegisterMetaType<UserLoginRsp>();
    qRegisterMetaType<UserLoginRspRepeated>();
}

UserLoginRsp::UserLoginRsp()
    : QProtobufMessage(&UserLoginRsp::staticMetaObject),
      dptr(new UserLoginRsp_QtProtobufData)
{
}

UserLoginRsp::UserLoginRsp(const UserLoginRsp &other)
    : QProtobufMessage(other),
      dptr(other.dptr)
{
}
UserLoginRsp &UserLoginRsp::operator =(const UserLoginRsp &other)
{
    QProtobufMessage::operator=(other);
    dptr = other.dptr;
    return *this;
}
UserLoginRsp::UserLoginRsp(UserLoginRsp &&other) noexcept
    : QProtobufMessage(std::move(other)),
      dptr(std::move(other.dptr))
{
}
UserLoginRsp &UserLoginRsp::operator =(UserLoginRsp &&other) noexcept
{
    QProtobufMessage::operator=(std::move(other));
    dptr.swap(other.dptr);
    return *this;
}
bool UserLoginRsp::operator ==(const UserLoginRsp &other) const
{
    return QProtobufMessage::isEqual(*this, other)
        && dptr->m_requestId == other.dptr->m_requestId
        && dptr->m_success == other.dptr->m_success
        && dptr->m_errmsg == other.dptr->m_errmsg
        && dptr->m_loginSessionId == other.dptr->m_loginSessionId;
}

bool UserLoginRsp::operator !=(const UserLoginRsp &other) const
{
    return !this->operator ==(other);
}

QString UserLoginRsp::requestId() const
{
    return dptr->m_requestId;
}

bool UserLoginRsp::success() const
{
    return dptr->m_success;
}

QString UserLoginRsp::errmsg() const
{
    return dptr->m_errmsg;
}

QString UserLoginRsp::loginSessionId() const
{
    return dptr->m_loginSessionId;
}

void UserLoginRsp::setRequestId(const QString &requestId)
{
    if (dptr->m_requestId != requestId) {
        dptr.detach();
        dptr->m_requestId = requestId;
    }
}

void UserLoginRsp::setSuccess(const bool &success)
{
    if (dptr->m_success != success) {
        dptr.detach();
        dptr->m_success = success;
    }
}

void UserLoginRsp::setErrmsg(const QString &errmsg)
{
    if (dptr->m_errmsg != errmsg) {
        dptr.detach();
        dptr->m_errmsg = errmsg;
    }
}

void UserLoginRsp::setLoginSessionId(const QString &loginSessionId)
{
    if (dptr->m_loginSessionId != loginSessionId) {
        dptr.detach();
        dptr->m_loginSessionId = loginSessionId;
    }
}


class PhoneVerifyCodeReq_QtProtobufData : public QSharedData
{
public:
    PhoneVerifyCodeReq_QtProtobufData()
        : QSharedData()
    {
    }

    PhoneVerifyCodeReq_QtProtobufData(const PhoneVerifyCodeReq_QtProtobufData &other)
        : QSharedData(other),
          m_requestId(other.m_requestId),
          m_phoneNumber(other.m_phoneNumber)
    {
    }

    QString m_requestId;
    QString m_phoneNumber;
};

PhoneVerifyCodeReq::~PhoneVerifyCodeReq() = default;

static constexpr struct {
    QtProtobufPrivate::QProtobufPropertyOrdering::Data data;
    const std::array<uint, 9> qt_protobuf_PhoneVerifyCodeReq_uint_data;
    const char qt_protobuf_PhoneVerifyCodeReq_char_data[50];
} qt_protobuf_PhoneVerifyCodeReq_metadata {
    // data
    {
        0, /* = version */
        2, /* = num fields */
        3, /* = field number offset */
        5, /* = property index offset */
        7, /* = field flags offset */
        26, /* = message full name length */
    },
    // uint_data
    {
        // JSON name offsets:
        27, /* = requestId */
        37, /* = phoneNumber */
        49, /* = end-of-string-marker */
        // Field numbers:
        1, /* = requestId */
        2, /* = phoneNumber */
        // Property indices:
        0, /* = requestId */
        1, /* = phoneNumber */
        // Field flags:
        QtProtobufPrivate::NoFlags, /* = requestId */
        QtProtobufPrivate::NoFlags, /* = phoneNumber */
    },
    // char_data
    /* metadata char_data: */
    "bite_im.PhoneVerifyCodeReq\0" /* = full message name */
    /* field char_data: */
    "requestId\0phoneNumber\0"
};

const QtProtobufPrivate::QProtobufPropertyOrdering PhoneVerifyCodeReq::propertyOrdering = {
    &qt_protobuf_PhoneVerifyCodeReq_metadata.data
};

void PhoneVerifyCodeReq::registerTypes()
{
    qRegisterMetaType<PhoneVerifyCodeReq>();
    qRegisterMetaType<PhoneVerifyCodeReqRepeated>();
}

PhoneVerifyCodeReq::PhoneVerifyCodeReq()
    : QProtobufMessage(&PhoneVerifyCodeReq::staticMetaObject),
      dptr(new PhoneVerifyCodeReq_QtProtobufData)
{
}

PhoneVerifyCodeReq::PhoneVerifyCodeReq(const PhoneVerifyCodeReq &other)
    : QProtobufMessage(other),
      dptr(other.dptr)
{
}
PhoneVerifyCodeReq &PhoneVerifyCodeReq::operator =(const PhoneVerifyCodeReq &other)
{
    QProtobufMessage::operator=(other);
    dptr = other.dptr;
    return *this;
}
PhoneVerifyCodeReq::PhoneVerifyCodeReq(PhoneVerifyCodeReq &&other) noexcept
    : QProtobufMessage(std::move(other)),
      dptr(std::move(other.dptr))
{
}
PhoneVerifyCodeReq &PhoneVerifyCodeReq::operator =(PhoneVerifyCodeReq &&other) noexcept
{
    QProtobufMessage::operator=(std::move(other));
    dptr.swap(other.dptr);
    return *this;
}
bool PhoneVerifyCodeReq::operator ==(const PhoneVerifyCodeReq &other) const
{
    return QProtobufMessage::isEqual(*this, other)
        && dptr->m_requestId == other.dptr->m_requestId
        && dptr->m_phoneNumber == other.dptr->m_phoneNumber;
}

bool PhoneVerifyCodeReq::operator !=(const PhoneVerifyCodeReq &other) const
{
    return !this->operator ==(other);
}

QString PhoneVerifyCodeReq::requestId() const
{
    return dptr->m_requestId;
}

QString PhoneVerifyCodeReq::phoneNumber() const
{
    return dptr->m_phoneNumber;
}

void PhoneVerifyCodeReq::setRequestId(const QString &requestId)
{
    if (dptr->m_requestId != requestId) {
        dptr.detach();
        dptr->m_requestId = requestId;
    }
}

void PhoneVerifyCodeReq::setPhoneNumber(const QString &phoneNumber)
{
    if (dptr->m_phoneNumber != phoneNumber) {
        dptr.detach();
        dptr->m_phoneNumber = phoneNumber;
    }
}


class PhoneVerifyCodeRsp_QtProtobufData : public QSharedData
{
public:
    PhoneVerifyCodeRsp_QtProtobufData()
        : QSharedData(),
          m_success(false)
    {
    }

    PhoneVerifyCodeRsp_QtProtobufData(const PhoneVerifyCodeRsp_QtProtobufData &other)
        : QSharedData(other),
          m_requestId(other.m_requestId),
          m_success(other.m_success),
          m_errmsg(other.m_errmsg),
          m_verifyCodeId(other.m_verifyCodeId)
    {
    }

    QString m_requestId;
    bool m_success;
    QString m_errmsg;
    QString m_verifyCodeId;
};

PhoneVerifyCodeRsp::~PhoneVerifyCodeRsp() = default;

static constexpr struct {
    QtProtobufPrivate::QProtobufPropertyOrdering::Data data;
    const std::array<uint, 17> qt_protobuf_PhoneVerifyCodeRsp_uint_data;
    const char qt_protobuf_PhoneVerifyCodeRsp_char_data[66];
} qt_protobuf_PhoneVerifyCodeRsp_metadata {
    // data
    {
        0, /* = version */
        4, /* = num fields */
        5, /* = field number offset */
        9, /* = property index offset */
        13, /* = field flags offset */
        26, /* = message full name length */
    },
    // uint_data
    {
        // JSON name offsets:
        27, /* = requestId */
        37, /* = success */
        45, /* = errmsg */
        52, /* = verifyCodeId */
        65, /* = end-of-string-marker */
        // Field numbers:
        1, /* = requestId */
        2, /* = success */
        3, /* = errmsg */
        4, /* = verifyCodeId */
        // Property indices:
        0, /* = requestId */
        1, /* = success */
        2, /* = errmsg */
        3, /* = verifyCodeId */
        // Field flags:
        QtProtobufPrivate::NoFlags, /* = requestId */
        QtProtobufPrivate::NoFlags, /* = success */
        QtProtobufPrivate::NoFlags, /* = errmsg */
        QtProtobufPrivate::NoFlags, /* = verifyCodeId */
    },
    // char_data
    /* metadata char_data: */
    "bite_im.PhoneVerifyCodeRsp\0" /* = full message name */
    /* field char_data: */
    "requestId\0success\0errmsg\0verifyCodeId\0"
};

const QtProtobufPrivate::QProtobufPropertyOrdering PhoneVerifyCodeRsp::propertyOrdering = {
    &qt_protobuf_PhoneVerifyCodeRsp_metadata.data
};

void PhoneVerifyCodeRsp::registerTypes()
{
    qRegisterMetaType<PhoneVerifyCodeRsp>();
    qRegisterMetaType<PhoneVerifyCodeRspRepeated>();
}

PhoneVerifyCodeRsp::PhoneVerifyCodeRsp()
    : QProtobufMessage(&PhoneVerifyCodeRsp::staticMetaObject),
      dptr(new PhoneVerifyCodeRsp_QtProtobufData)
{
}

PhoneVerifyCodeRsp::PhoneVerifyCodeRsp(const PhoneVerifyCodeRsp &other)
    : QProtobufMessage(other),
      dptr(other.dptr)
{
}
PhoneVerifyCodeRsp &PhoneVerifyCodeRsp::operator =(const PhoneVerifyCodeRsp &other)
{
    QProtobufMessage::operator=(other);
    dptr = other.dptr;
    return *this;
}
PhoneVerifyCodeRsp::PhoneVerifyCodeRsp(PhoneVerifyCodeRsp &&other) noexcept
    : QProtobufMessage(std::move(other)),
      dptr(std::move(other.dptr))
{
}
PhoneVerifyCodeRsp &PhoneVerifyCodeRsp::operator =(PhoneVerifyCodeRsp &&other) noexcept
{
    QProtobufMessage::operator=(std::move(other));
    dptr.swap(other.dptr);
    return *this;
}
bool PhoneVerifyCodeRsp::operator ==(const PhoneVerifyCodeRsp &other) const
{
    return QProtobufMessage::isEqual(*this, other)
        && dptr->m_requestId == other.dptr->m_requestId
        && dptr->m_success == other.dptr->m_success
        && dptr->m_errmsg == other.dptr->m_errmsg
        && dptr->m_verifyCodeId == other.dptr->m_verifyCodeId;
}

bool PhoneVerifyCodeRsp::operator !=(const PhoneVerifyCodeRsp &other) const
{
    return !this->operator ==(other);
}

QString PhoneVerifyCodeRsp::requestId() const
{
    return dptr->m_requestId;
}

bool PhoneVerifyCodeRsp::success() const
{
    return dptr->m_success;
}

QString PhoneVerifyCodeRsp::errmsg() const
{
    return dptr->m_errmsg;
}

QString PhoneVerifyCodeRsp::verifyCodeId() const
{
    return dptr->m_verifyCodeId;
}

void PhoneVerifyCodeRsp::setRequestId(const QString &requestId)
{
    if (dptr->m_requestId != requestId) {
        dptr.detach();
        dptr->m_requestId = requestId;
    }
}

void PhoneVerifyCodeRsp::setSuccess(const bool &success)
{
    if (dptr->m_success != success) {
        dptr.detach();
        dptr->m_success = success;
    }
}

void PhoneVerifyCodeRsp::setErrmsg(const QString &errmsg)
{
    if (dptr->m_errmsg != errmsg) {
        dptr.detach();
        dptr->m_errmsg = errmsg;
    }
}

void PhoneVerifyCodeRsp::setVerifyCodeId(const QString &verifyCodeId)
{
    if (dptr->m_verifyCodeId != verifyCodeId) {
        dptr.detach();
        dptr->m_verifyCodeId = verifyCodeId;
    }
}


class PhoneRegisterReq_QtProtobufData : public QSharedData
{
public:
    PhoneRegisterReq_QtProtobufData()
        : QSharedData()
    {
    }

    PhoneRegisterReq_QtProtobufData(const PhoneRegisterReq_QtProtobufData &other)
        : QSharedData(other),
          m_requestId(other.m_requestId),
          m_phoneNumber(other.m_phoneNumber),
          m_verifyCodeId(other.m_verifyCodeId),
          m_verifyCode(other.m_verifyCode)
    {
    }

    QString m_requestId;
    QString m_phoneNumber;
    QString m_verifyCodeId;
    QString m_verifyCode;
};

PhoneRegisterReq::~PhoneRegisterReq() = default;

static constexpr struct {
    QtProtobufPrivate::QProtobufPropertyOrdering::Data data;
    const std::array<uint, 17> qt_protobuf_PhoneRegisterReq_uint_data;
    const char qt_protobuf_PhoneRegisterReq_char_data[72];
} qt_protobuf_PhoneRegisterReq_metadata {
    // data
    {
        0, /* = version */
        4, /* = num fields */
        5, /* = field number offset */
        9, /* = property index offset */
        13, /* = field flags offset */
        24, /* = message full name length */
    },
    // uint_data
    {
        // JSON name offsets:
        25, /* = requestId */
        35, /* = phoneNumber */
        47, /* = verifyCodeId */
        60, /* = verifyCode */
        71, /* = end-of-string-marker */
        // Field numbers:
        1, /* = requestId */
        2, /* = phoneNumber */
        3, /* = verifyCodeId */
        4, /* = verifyCode */
        // Property indices:
        0, /* = requestId */
        1, /* = phoneNumber */
        2, /* = verifyCodeId */
        3, /* = verifyCode */
        // Field flags:
        QtProtobufPrivate::NoFlags, /* = requestId */
        QtProtobufPrivate::NoFlags, /* = phoneNumber */
        QtProtobufPrivate::NoFlags, /* = verifyCodeId */
        QtProtobufPrivate::NoFlags, /* = verifyCode */
    },
    // char_data
    /* metadata char_data: */
    "bite_im.PhoneRegisterReq\0" /* = full message name */
    /* field char_data: */
    "requestId\0phoneNumber\0verifyCodeId\0verifyCode\0"
};

const QtProtobufPrivate::QProtobufPropertyOrdering PhoneRegisterReq::propertyOrdering = {
    &qt_protobuf_PhoneRegisterReq_metadata.data
};

void PhoneRegisterReq::registerTypes()
{
    qRegisterMetaType<PhoneRegisterReq>();
    qRegisterMetaType<PhoneRegisterReqRepeated>();
}

PhoneRegisterReq::PhoneRegisterReq()
    : QProtobufMessage(&PhoneRegisterReq::staticMetaObject),
      dptr(new PhoneRegisterReq_QtProtobufData)
{
}

PhoneRegisterReq::PhoneRegisterReq(const PhoneRegisterReq &other)
    : QProtobufMessage(other),
      dptr(other.dptr)
{
}
PhoneRegisterReq &PhoneRegisterReq::operator =(const PhoneRegisterReq &other)
{
    QProtobufMessage::operator=(other);
    dptr = other.dptr;
    return *this;
}
PhoneRegisterReq::PhoneRegisterReq(PhoneRegisterReq &&other) noexcept
    : QProtobufMessage(std::move(other)),
      dptr(std::move(other.dptr))
{
}
PhoneRegisterReq &PhoneRegisterReq::operator =(PhoneRegisterReq &&other) noexcept
{
    QProtobufMessage::operator=(std::move(other));
    dptr.swap(other.dptr);
    return *this;
}
bool PhoneRegisterReq::operator ==(const PhoneRegisterReq &other) const
{
    return QProtobufMessage::isEqual(*this, other)
        && dptr->m_requestId == other.dptr->m_requestId
        && dptr->m_phoneNumber == other.dptr->m_phoneNumber
        && dptr->m_verifyCodeId == other.dptr->m_verifyCodeId
        && dptr->m_verifyCode == other.dptr->m_verifyCode;
}

bool PhoneRegisterReq::operator !=(const PhoneRegisterReq &other) const
{
    return !this->operator ==(other);
}

QString PhoneRegisterReq::requestId() const
{
    return dptr->m_requestId;
}

QString PhoneRegisterReq::phoneNumber() const
{
    return dptr->m_phoneNumber;
}

QString PhoneRegisterReq::verifyCodeId() const
{
    return dptr->m_verifyCodeId;
}

QString PhoneRegisterReq::verifyCode() const
{
    return dptr->m_verifyCode;
}

void PhoneRegisterReq::setRequestId(const QString &requestId)
{
    if (dptr->m_requestId != requestId) {
        dptr.detach();
        dptr->m_requestId = requestId;
    }
}

void PhoneRegisterReq::setPhoneNumber(const QString &phoneNumber)
{
    if (dptr->m_phoneNumber != phoneNumber) {
        dptr.detach();
        dptr->m_phoneNumber = phoneNumber;
    }
}

void PhoneRegisterReq::setVerifyCodeId(const QString &verifyCodeId)
{
    if (dptr->m_verifyCodeId != verifyCodeId) {
        dptr.detach();
        dptr->m_verifyCodeId = verifyCodeId;
    }
}

void PhoneRegisterReq::setVerifyCode(const QString &verifyCode)
{
    if (dptr->m_verifyCode != verifyCode) {
        dptr.detach();
        dptr->m_verifyCode = verifyCode;
    }
}


class PhoneRegisterRsp_QtProtobufData : public QSharedData
{
public:
    PhoneRegisterRsp_QtProtobufData()
        : QSharedData(),
          m_success(false)
    {
    }

    PhoneRegisterRsp_QtProtobufData(const PhoneRegisterRsp_QtProtobufData &other)
        : QSharedData(other),
          m_requestId(other.m_requestId),
          m_success(other.m_success),
          m_errmsg(other.m_errmsg)
    {
    }

    QString m_requestId;
    bool m_success;
    QString m_errmsg;
};

PhoneRegisterRsp::~PhoneRegisterRsp() = default;

static constexpr struct {
    QtProtobufPrivate::QProtobufPropertyOrdering::Data data;
    const std::array<uint, 13> qt_protobuf_PhoneRegisterRsp_uint_data;
    const char qt_protobuf_PhoneRegisterRsp_char_data[51];
} qt_protobuf_PhoneRegisterRsp_metadata {
    // data
    {
        0, /* = version */
        3, /* = num fields */
        4, /* = field number offset */
        7, /* = property index offset */
        10, /* = field flags offset */
        24, /* = message full name length */
    },
    // uint_data
    {
        // JSON name offsets:
        25, /* = requestId */
        35, /* = success */
        43, /* = errmsg */
        50, /* = end-of-string-marker */
        // Field numbers:
        1, /* = requestId */
        2, /* = success */
        3, /* = errmsg */
        // Property indices:
        0, /* = requestId */
        1, /* = success */
        2, /* = errmsg */
        // Field flags:
        QtProtobufPrivate::NoFlags, /* = requestId */
        QtProtobufPrivate::NoFlags, /* = success */
        QtProtobufPrivate::NoFlags, /* = errmsg */
    },
    // char_data
    /* metadata char_data: */
    "bite_im.PhoneRegisterRsp\0" /* = full message name */
    /* field char_data: */
    "requestId\0success\0errmsg\0"
};

const QtProtobufPrivate::QProtobufPropertyOrdering PhoneRegisterRsp::propertyOrdering = {
    &qt_protobuf_PhoneRegisterRsp_metadata.data
};

void PhoneRegisterRsp::registerTypes()
{
    qRegisterMetaType<PhoneRegisterRsp>();
    qRegisterMetaType<PhoneRegisterRspRepeated>();
}

PhoneRegisterRsp::PhoneRegisterRsp()
    : QProtobufMessage(&PhoneRegisterRsp::staticMetaObject),
      dptr(new PhoneRegisterRsp_QtProtobufData)
{
}

PhoneRegisterRsp::PhoneRegisterRsp(const PhoneRegisterRsp &other)
    : QProtobufMessage(other),
      dptr(other.dptr)
{
}
PhoneRegisterRsp &PhoneRegisterRsp::operator =(const PhoneRegisterRsp &other)
{
    QProtobufMessage::operator=(other);
    dptr = other.dptr;
    return *this;
}
PhoneRegisterRsp::PhoneRegisterRsp(PhoneRegisterRsp &&other) noexcept
    : QProtobufMessage(std::move(other)),
      dptr(std::move(other.dptr))
{
}
PhoneRegisterRsp &PhoneRegisterRsp::operator =(PhoneRegisterRsp &&other) noexcept
{
    QProtobufMessage::operator=(std::move(other));
    dptr.swap(other.dptr);
    return *this;
}
bool PhoneRegisterRsp::operator ==(const PhoneRegisterRsp &other) const
{
    return QProtobufMessage::isEqual(*this, other)
        && dptr->m_requestId == other.dptr->m_requestId
        && dptr->m_success == other.dptr->m_success
        && dptr->m_errmsg == other.dptr->m_errmsg;
}

bool PhoneRegisterRsp::operator !=(const PhoneRegisterRsp &other) const
{
    return !this->operator ==(other);
}

QString PhoneRegisterRsp::requestId() const
{
    return dptr->m_requestId;
}

bool PhoneRegisterRsp::success() const
{
    return dptr->m_success;
}

QString PhoneRegisterRsp::errmsg() const
{
    return dptr->m_errmsg;
}

void PhoneRegisterRsp::setRequestId(const QString &requestId)
{
    if (dptr->m_requestId != requestId) {
        dptr.detach();
        dptr->m_requestId = requestId;
    }
}

void PhoneRegisterRsp::setSuccess(const bool &success)
{
    if (dptr->m_success != success) {
        dptr.detach();
        dptr->m_success = success;
    }
}

void PhoneRegisterRsp::setErrmsg(const QString &errmsg)
{
    if (dptr->m_errmsg != errmsg) {
        dptr.detach();
        dptr->m_errmsg = errmsg;
    }
}


class PhoneLoginReq_QtProtobufData : public QSharedData
{
public:
    PhoneLoginReq_QtProtobufData()
        : QSharedData()
    {
    }

    PhoneLoginReq_QtProtobufData(const PhoneLoginReq_QtProtobufData &other)
        : QSharedData(other),
          m_requestId(other.m_requestId),
          m_phoneNumber(other.m_phoneNumber),
          m_verifyCodeId(other.m_verifyCodeId),
          m_verifyCode(other.m_verifyCode)
    {
    }

    QString m_requestId;
    QString m_phoneNumber;
    QString m_verifyCodeId;
    QString m_verifyCode;
};

PhoneLoginReq::~PhoneLoginReq() = default;

static constexpr struct {
    QtProtobufPrivate::QProtobufPropertyOrdering::Data data;
    const std::array<uint, 17> qt_protobuf_PhoneLoginReq_uint_data;
    const char qt_protobuf_PhoneLoginReq_char_data[69];
} qt_protobuf_PhoneLoginReq_metadata {
    // data
    {
        0, /* = version */
        4, /* = num fields */
        5, /* = field number offset */
        9, /* = property index offset */
        13, /* = field flags offset */
        21, /* = message full name length */
    },
    // uint_data
    {
        // JSON name offsets:
        22, /* = requestId */
        32, /* = phoneNumber */
        44, /* = verifyCodeId */
        57, /* = verifyCode */
        68, /* = end-of-string-marker */
        // Field numbers:
        1, /* = requestId */
        2, /* = phoneNumber */
        3, /* = verifyCodeId */
        4, /* = verifyCode */
        // Property indices:
        0, /* = requestId */
        1, /* = phoneNumber */
        2, /* = verifyCodeId */
        3, /* = verifyCode */
        // Field flags:
        QtProtobufPrivate::NoFlags, /* = requestId */
        QtProtobufPrivate::NoFlags, /* = phoneNumber */
        QtProtobufPrivate::NoFlags, /* = verifyCodeId */
        QtProtobufPrivate::NoFlags, /* = verifyCode */
    },
    // char_data
    /* metadata char_data: */
    "bite_im.PhoneLoginReq\0" /* = full message name */
    /* field char_data: */
    "requestId\0phoneNumber\0verifyCodeId\0verifyCode\0"
};

const QtProtobufPrivate::QProtobufPropertyOrdering PhoneLoginReq::propertyOrdering = {
    &qt_protobuf_PhoneLoginReq_metadata.data
};

void PhoneLoginReq::registerTypes()
{
    qRegisterMetaType<PhoneLoginReq>();
    qRegisterMetaType<PhoneLoginReqRepeated>();
}

PhoneLoginReq::PhoneLoginReq()
    : QProtobufMessage(&PhoneLoginReq::staticMetaObject),
      dptr(new PhoneLoginReq_QtProtobufData)
{
}

PhoneLoginReq::PhoneLoginReq(const PhoneLoginReq &other)
    : QProtobufMessage(other),
      dptr(other.dptr)
{
}
PhoneLoginReq &PhoneLoginReq::operator =(const PhoneLoginReq &other)
{
    QProtobufMessage::operator=(other);
    dptr = other.dptr;
    return *this;
}
PhoneLoginReq::PhoneLoginReq(PhoneLoginReq &&other) noexcept
    : QProtobufMessage(std::move(other)),
      dptr(std::move(other.dptr))
{
}
PhoneLoginReq &PhoneLoginReq::operator =(PhoneLoginReq &&other) noexcept
{
    QProtobufMessage::operator=(std::move(other));
    dptr.swap(other.dptr);
    return *this;
}
bool PhoneLoginReq::operator ==(const PhoneLoginReq &other) const
{
    return QProtobufMessage::isEqual(*this, other)
        && dptr->m_requestId == other.dptr->m_requestId
        && dptr->m_phoneNumber == other.dptr->m_phoneNumber
        && dptr->m_verifyCodeId == other.dptr->m_verifyCodeId
        && dptr->m_verifyCode == other.dptr->m_verifyCode;
}

bool PhoneLoginReq::operator !=(const PhoneLoginReq &other) const
{
    return !this->operator ==(other);
}

QString PhoneLoginReq::requestId() const
{
    return dptr->m_requestId;
}

QString PhoneLoginReq::phoneNumber() const
{
    return dptr->m_phoneNumber;
}

QString PhoneLoginReq::verifyCodeId() const
{
    return dptr->m_verifyCodeId;
}

QString PhoneLoginReq::verifyCode() const
{
    return dptr->m_verifyCode;
}

void PhoneLoginReq::setRequestId(const QString &requestId)
{
    if (dptr->m_requestId != requestId) {
        dptr.detach();
        dptr->m_requestId = requestId;
    }
}

void PhoneLoginReq::setPhoneNumber(const QString &phoneNumber)
{
    if (dptr->m_phoneNumber != phoneNumber) {
        dptr.detach();
        dptr->m_phoneNumber = phoneNumber;
    }
}

void PhoneLoginReq::setVerifyCodeId(const QString &verifyCodeId)
{
    if (dptr->m_verifyCodeId != verifyCodeId) {
        dptr.detach();
        dptr->m_verifyCodeId = verifyCodeId;
    }
}

void PhoneLoginReq::setVerifyCode(const QString &verifyCode)
{
    if (dptr->m_verifyCode != verifyCode) {
        dptr.detach();
        dptr->m_verifyCode = verifyCode;
    }
}


class PhoneLoginRsp_QtProtobufData : public QSharedData
{
public:
    PhoneLoginRsp_QtProtobufData()
        : QSharedData(),
          m_success(false)
    {
    }

    PhoneLoginRsp_QtProtobufData(const PhoneLoginRsp_QtProtobufData &other)
        : QSharedData(other),
          m_requestId(other.m_requestId),
          m_success(other.m_success),
          m_errmsg(other.m_errmsg),
          m_loginSessionId(other.m_loginSessionId)
    {
    }

    QString m_requestId;
    bool m_success;
    QString m_errmsg;
    QString m_loginSessionId;
};

PhoneLoginRsp::~PhoneLoginRsp() = default;

static constexpr struct {
    QtProtobufPrivate::QProtobufPropertyOrdering::Data data;
    const std::array<uint, 17> qt_protobuf_PhoneLoginRsp_uint_data;
    const char qt_protobuf_PhoneLoginRsp_char_data[63];
} qt_protobuf_PhoneLoginRsp_metadata {
    // data
    {
        0, /* = version */
        4, /* = num fields */
        5, /* = field number offset */
        9, /* = property index offset */
        13, /* = field flags offset */
        21, /* = message full name length */
    },
    // uint_data
    {
        // JSON name offsets:
        22, /* = requestId */
        32, /* = success */
        40, /* = errmsg */
        47, /* = loginSessionId */
        62, /* = end-of-string-marker */
        // Field numbers:
        1, /* = requestId */
        2, /* = success */
        3, /* = errmsg */
        4, /* = loginSessionId */
        // Property indices:
        0, /* = requestId */
        1, /* = success */
        2, /* = errmsg */
        3, /* = loginSessionId */
        // Field flags:
        QtProtobufPrivate::NoFlags, /* = requestId */
        QtProtobufPrivate::NoFlags, /* = success */
        QtProtobufPrivate::NoFlags, /* = errmsg */
        QtProtobufPrivate::NoFlags, /* = loginSessionId */
    },
    // char_data
    /* metadata char_data: */
    "bite_im.PhoneLoginRsp\0" /* = full message name */
    /* field char_data: */
    "requestId\0success\0errmsg\0loginSessionId\0"
};

const QtProtobufPrivate::QProtobufPropertyOrdering PhoneLoginRsp::propertyOrdering = {
    &qt_protobuf_PhoneLoginRsp_metadata.data
};

void PhoneLoginRsp::registerTypes()
{
    qRegisterMetaType<PhoneLoginRsp>();
    qRegisterMetaType<PhoneLoginRspRepeated>();
}

PhoneLoginRsp::PhoneLoginRsp()
    : QProtobufMessage(&PhoneLoginRsp::staticMetaObject),
      dptr(new PhoneLoginRsp_QtProtobufData)
{
}

PhoneLoginRsp::PhoneLoginRsp(const PhoneLoginRsp &other)
    : QProtobufMessage(other),
      dptr(other.dptr)
{
}
PhoneLoginRsp &PhoneLoginRsp::operator =(const PhoneLoginRsp &other)
{
    QProtobufMessage::operator=(other);
    dptr = other.dptr;
    return *this;
}
PhoneLoginRsp::PhoneLoginRsp(PhoneLoginRsp &&other) noexcept
    : QProtobufMessage(std::move(other)),
      dptr(std::move(other.dptr))
{
}
PhoneLoginRsp &PhoneLoginRsp::operator =(PhoneLoginRsp &&other) noexcept
{
    QProtobufMessage::operator=(std::move(other));
    dptr.swap(other.dptr);
    return *this;
}
bool PhoneLoginRsp::operator ==(const PhoneLoginRsp &other) const
{
    return QProtobufMessage::isEqual(*this, other)
        && dptr->m_requestId == other.dptr->m_requestId
        && dptr->m_success == other.dptr->m_success
        && dptr->m_errmsg == other.dptr->m_errmsg
        && dptr->m_loginSessionId == other.dptr->m_loginSessionId;
}

bool PhoneLoginRsp::operator !=(const PhoneLoginRsp &other) const
{
    return !this->operator ==(other);
}

QString PhoneLoginRsp::requestId() const
{
    return dptr->m_requestId;
}

bool PhoneLoginRsp::success() const
{
    return dptr->m_success;
}

QString PhoneLoginRsp::errmsg() const
{
    return dptr->m_errmsg;
}

QString PhoneLoginRsp::loginSessionId() const
{
    return dptr->m_loginSessionId;
}

void PhoneLoginRsp::setRequestId(const QString &requestId)
{
    if (dptr->m_requestId != requestId) {
        dptr.detach();
        dptr->m_requestId = requestId;
    }
}

void PhoneLoginRsp::setSuccess(const bool &success)
{
    if (dptr->m_success != success) {
        dptr.detach();
        dptr->m_success = success;
    }
}

void PhoneLoginRsp::setErrmsg(const QString &errmsg)
{
    if (dptr->m_errmsg != errmsg) {
        dptr.detach();
        dptr->m_errmsg = errmsg;
    }
}

void PhoneLoginRsp::setLoginSessionId(const QString &loginSessionId)
{
    if (dptr->m_loginSessionId != loginSessionId) {
        dptr.detach();
        dptr->m_loginSessionId = loginSessionId;
    }
}


class GetUserInfoReq_QtProtobufData : public QSharedData
{
public:
    GetUserInfoReq_QtProtobufData()
        : QSharedData()
    {
    }

    GetUserInfoReq_QtProtobufData(const GetUserInfoReq_QtProtobufData &other)
        : QSharedData(other),
          m_requestId(other.m_requestId),
          m_userId(other.m_userId),
          m_sessionId(other.m_sessionId)
    {
    }

    QString m_requestId;
    std::optional<QString> m_userId;
    std::optional<QString> m_sessionId;
};

GetUserInfoReq::~GetUserInfoReq() = default;

static constexpr struct {
    QtProtobufPrivate::QProtobufPropertyOrdering::Data data;
    const std::array<uint, 13> qt_protobuf_GetUserInfoReq_uint_data;
    const char qt_protobuf_GetUserInfoReq_char_data[51];
} qt_protobuf_GetUserInfoReq_metadata {
    // data
    {
        0, /* = version */
        3, /* = num fields */
        4, /* = field number offset */
        7, /* = property index offset */
        10, /* = field flags offset */
        22, /* = message full name length */
    },
    // uint_data
    {
        // JSON name offsets:
        23, /* = requestId */
        33, /* = userId */
        40, /* = sessionId */
        50, /* = end-of-string-marker */
        // Field numbers:
        1, /* = requestId */
        2, /* = userId */
        3, /* = sessionId */
        // Property indices:
        0, /* = requestId */
        1, /* = userId */
        3, /* = sessionId */
        // Field flags:
        QtProtobufPrivate::NoFlags, /* = requestId */
        QtProtobufPrivate::Optional, /* = userId */
        QtProtobufPrivate::Optional, /* = sessionId */
    },
    // char_data
    /* metadata char_data: */
    "bite_im.GetUserInfoReq\0" /* = full message name */
    /* field char_data: */
    "requestId\0userId\0sessionId\0"
};

const QtProtobufPrivate::QProtobufPropertyOrdering GetUserInfoReq::propertyOrdering = {
    &qt_protobuf_GetUserInfoReq_metadata.data
};

void GetUserInfoReq::registerTypes()
{
    qRegisterMetaType<GetUserInfoReq>();
    qRegisterMetaType<GetUserInfoReqRepeated>();
}

GetUserInfoReq::GetUserInfoReq()
    : QProtobufMessage(&GetUserInfoReq::staticMetaObject),
      dptr(new GetUserInfoReq_QtProtobufData)
{
}

GetUserInfoReq::GetUserInfoReq(const GetUserInfoReq &other)
    : QProtobufMessage(other),
      dptr(other.dptr)
{
}
GetUserInfoReq &GetUserInfoReq::operator =(const GetUserInfoReq &other)
{
    QProtobufMessage::operator=(other);
    dptr = other.dptr;
    return *this;
}
GetUserInfoReq::GetUserInfoReq(GetUserInfoReq &&other) noexcept
    : QProtobufMessage(std::move(other)),
      dptr(std::move(other.dptr))
{
}
GetUserInfoReq &GetUserInfoReq::operator =(GetUserInfoReq &&other) noexcept
{
    QProtobufMessage::operator=(std::move(other));
    dptr.swap(other.dptr);
    return *this;
}
bool GetUserInfoReq::operator ==(const GetUserInfoReq &other) const
{
    return QProtobufMessage::isEqual(*this, other)
        && dptr->m_requestId == other.dptr->m_requestId
        && dptr->m_userId == other.dptr->m_userId
        && dptr->m_sessionId == other.dptr->m_sessionId;
}

bool GetUserInfoReq::operator !=(const GetUserInfoReq &other) const
{
    return !this->operator ==(other);
}

QString GetUserInfoReq::requestId() const
{
    return dptr->m_requestId;
}

QString GetUserInfoReq::userId_p() const
{
    return dptr->m_userId ?
        dptr->m_userId.value() : QString();
}

bool GetUserInfoReq::hasUserId() const
{
    return dptr->m_userId.has_value();
}
QString GetUserInfoReq::userId() const
{
    Q_ASSERT(dptr->m_userId.has_value());
    return dptr->m_userId.value();
}

QString GetUserInfoReq::sessionId_p() const
{
    return dptr->m_sessionId ?
        dptr->m_sessionId.value() : QString();
}

bool GetUserInfoReq::hasSessionId() const
{
    return dptr->m_sessionId.has_value();
}
QString GetUserInfoReq::sessionId() const
{
    Q_ASSERT(dptr->m_sessionId.has_value());
    return dptr->m_sessionId.value();
}

void GetUserInfoReq::setRequestId(const QString &requestId)
{
    if (dptr->m_requestId != requestId) {
        dptr.detach();
        dptr->m_requestId = requestId;
    }
}

void GetUserInfoReq::setUserId(const QString &userId)
{
    if (!dptr->m_userId || dptr->m_userId.value() != userId) {
        dptr.detach();
        dptr->m_userId = userId;
    }
}

void GetUserInfoReq::setUserId_p(QString userId)
{
    if (!dptr->m_userId || dptr->m_userId != userId) {
        dptr.detach();
        dptr->m_userId = userId;
    }
}

void GetUserInfoReq::clearUserId()
{
    if (dptr->m_userId.has_value()) {
        dptr.detach();
        dptr->m_userId.reset();
    }
}
void GetUserInfoReq::setSessionId(const QString &sessionId)
{
    if (!dptr->m_sessionId || dptr->m_sessionId.value() != sessionId) {
        dptr.detach();
        dptr->m_sessionId = sessionId;
    }
}

void GetUserInfoReq::setSessionId_p(QString sessionId)
{
    if (!dptr->m_sessionId || dptr->m_sessionId != sessionId) {
        dptr.detach();
        dptr->m_sessionId = sessionId;
    }
}

void GetUserInfoReq::clearSessionId()
{
    if (dptr->m_sessionId.has_value()) {
        dptr.detach();
        dptr->m_sessionId.reset();
    }
}

class GetUserInfoRsp_QtProtobufData : public QSharedData
{
public:
    GetUserInfoRsp_QtProtobufData()
        : QSharedData(),
          m_success(false),
          m_userInfo(nullptr)
    {
    }

    GetUserInfoRsp_QtProtobufData(const GetUserInfoRsp_QtProtobufData &other)
        : QSharedData(other),
          m_requestId(other.m_requestId),
          m_success(other.m_success),
          m_errmsg(other.m_errmsg),
          m_userInfo(other.m_userInfo
                                               ? new UserInfo(*other.m_userInfo)
                                               : nullptr)
    {
    }

    QString m_requestId;
    bool m_success;
    QString m_errmsg;
    QtProtobufPrivate::QProtobufLazyMessagePointer<UserInfo> m_userInfo;
};

GetUserInfoRsp::~GetUserInfoRsp() = default;

static constexpr struct {
    QtProtobufPrivate::QProtobufPropertyOrdering::Data data;
    const std::array<uint, 17> qt_protobuf_GetUserInfoRsp_uint_data;
    const char qt_protobuf_GetUserInfoRsp_char_data[58];
} qt_protobuf_GetUserInfoRsp_metadata {
    // data
    {
        0, /* = version */
        4, /* = num fields */
        5, /* = field number offset */
        9, /* = property index offset */
        13, /* = field flags offset */
        22, /* = message full name length */
    },
    // uint_data
    {
        // JSON name offsets:
        23, /* = requestId */
        33, /* = success */
        41, /* = errmsg */
        48, /* = userInfo */
        57, /* = end-of-string-marker */
        // Field numbers:
        1, /* = requestId */
        2, /* = success */
        3, /* = errmsg */
        4, /* = userInfo */
        // Property indices:
        0, /* = requestId */
        1, /* = success */
        2, /* = errmsg */
        3, /* = userInfo */
        // Field flags:
        QtProtobufPrivate::NoFlags, /* = requestId */
        QtProtobufPrivate::NoFlags, /* = success */
        QtProtobufPrivate::NoFlags, /* = errmsg */
        QtProtobufPrivate::NoFlags, /* = userInfo */
    },
    // char_data
    /* metadata char_data: */
    "bite_im.GetUserInfoRsp\0" /* = full message name */
    /* field char_data: */
    "requestId\0success\0errmsg\0userInfo\0"
};

const QtProtobufPrivate::QProtobufPropertyOrdering GetUserInfoRsp::propertyOrdering = {
    &qt_protobuf_GetUserInfoRsp_metadata.data
};

void GetUserInfoRsp::registerTypes()
{
    qRegisterMetaType<GetUserInfoRsp>();
    qRegisterMetaType<GetUserInfoRspRepeated>();
}

GetUserInfoRsp::GetUserInfoRsp()
    : QProtobufMessage(&GetUserInfoRsp::staticMetaObject),
      dptr(new GetUserInfoRsp_QtProtobufData)
{
}

GetUserInfoRsp::GetUserInfoRsp(const GetUserInfoRsp &other)
    : QProtobufMessage(other),
      dptr(other.dptr)
{
}
GetUserInfoRsp &GetUserInfoRsp::operator =(const GetUserInfoRsp &other)
{
    QProtobufMessage::operator=(other);
    dptr = other.dptr;
    return *this;
}
GetUserInfoRsp::GetUserInfoRsp(GetUserInfoRsp &&other) noexcept
    : QProtobufMessage(std::move(other)),
      dptr(std::move(other.dptr))
{
}
GetUserInfoRsp &GetUserInfoRsp::operator =(GetUserInfoRsp &&other) noexcept
{
    QProtobufMessage::operator=(std::move(other));
    dptr.swap(other.dptr);
    return *this;
}
bool GetUserInfoRsp::operator ==(const GetUserInfoRsp &other) const
{
    return QProtobufMessage::isEqual(*this, other)
        && dptr->m_requestId == other.dptr->m_requestId
        && dptr->m_success == other.dptr->m_success
        && dptr->m_errmsg == other.dptr->m_errmsg
        && (dptr->m_userInfo == other.dptr->m_userInfo
            || *dptr->m_userInfo == *other.dptr->m_userInfo);
}

bool GetUserInfoRsp::operator !=(const GetUserInfoRsp &other) const
{
    return !this->operator ==(other);
}

QString GetUserInfoRsp::requestId() const
{
    return dptr->m_requestId;
}

bool GetUserInfoRsp::success() const
{
    return dptr->m_success;
}

QString GetUserInfoRsp::errmsg() const
{
    return dptr->m_errmsg;
}

UserInfo *GetUserInfoRsp::userInfo_p() const
{
    return dptr->m_userInfo ? dptr->m_userInfo.get() : nullptr;
}

bool GetUserInfoRsp::hasUserInfo() const
{
    return dptr->m_userInfo.operator bool();
}

UserInfo &GetUserInfoRsp::userInfo()
{
    dptr.detach();
    return *dptr->m_userInfo;
}
const UserInfo &GetUserInfoRsp::userInfo() const
{
    return *dptr->m_userInfo;
}

void GetUserInfoRsp::clearUserInfo()
{
    if (dptr->m_userInfo) {
        dptr.detach();
        dptr->m_userInfo.reset();
    }
}

void GetUserInfoRsp::setRequestId(const QString &requestId)
{
    if (dptr->m_requestId != requestId) {
        dptr.detach();
        dptr->m_requestId = requestId;
    }
}

void GetUserInfoRsp::setSuccess(const bool &success)
{
    if (dptr->m_success != success) {
        dptr.detach();
        dptr->m_success = success;
    }
}

void GetUserInfoRsp::setErrmsg(const QString &errmsg)
{
    if (dptr->m_errmsg != errmsg) {
        dptr.detach();
        dptr->m_errmsg = errmsg;
    }
}

void GetUserInfoRsp::setUserInfo_p(UserInfo *userInfo)
{
    if (dptr->m_userInfo.get() != userInfo) {
        dptr.detach();
        dptr->m_userInfo.reset(userInfo);
    }
}

void GetUserInfoRsp::setUserInfo(const UserInfo &userInfo)
{
    if (*dptr->m_userInfo != userInfo) {
        dptr.detach();
        *dptr->m_userInfo = userInfo;
    }
}


class SetUserAvatarReq_QtProtobufData : public QSharedData
{
public:
    SetUserAvatarReq_QtProtobufData()
        : QSharedData()
    {
    }

    SetUserAvatarReq_QtProtobufData(const SetUserAvatarReq_QtProtobufData &other)
        : QSharedData(other),
          m_requestId(other.m_requestId),
          m_userId(other.m_userId),
          m_sessionId(other.m_sessionId),
          m_avatar(other.m_avatar)
    {
    }

    QString m_requestId;
    std::optional<QString> m_userId;
    std::optional<QString> m_sessionId;
    QByteArray m_avatar;
};

SetUserAvatarReq::~SetUserAvatarReq() = default;

static constexpr struct {
    QtProtobufPrivate::QProtobufPropertyOrdering::Data data;
    const std::array<uint, 17> qt_protobuf_SetUserAvatarReq_uint_data;
    const char qt_protobuf_SetUserAvatarReq_char_data[60];
} qt_protobuf_SetUserAvatarReq_metadata {
    // data
    {
        0, /* = version */
        4, /* = num fields */
        5, /* = field number offset */
        9, /* = property index offset */
        13, /* = field flags offset */
        24, /* = message full name length */
    },
    // uint_data
    {
        // JSON name offsets:
        25, /* = requestId */
        35, /* = userId */
        42, /* = sessionId */
        52, /* = avatar */
        59, /* = end-of-string-marker */
        // Field numbers:
        1, /* = requestId */
        2, /* = userId */
        3, /* = sessionId */
        4, /* = avatar */
        // Property indices:
        0, /* = requestId */
        1, /* = userId */
        3, /* = sessionId */
        5, /* = avatar */
        // Field flags:
        QtProtobufPrivate::NoFlags, /* = requestId */
        QtProtobufPrivate::Optional, /* = userId */
        QtProtobufPrivate::Optional, /* = sessionId */
        QtProtobufPrivate::NoFlags, /* = avatar */
    },
    // char_data
    /* metadata char_data: */
    "bite_im.SetUserAvatarReq\0" /* = full message name */
    /* field char_data: */
    "requestId\0userId\0sessionId\0avatar\0"
};

const QtProtobufPrivate::QProtobufPropertyOrdering SetUserAvatarReq::propertyOrdering = {
    &qt_protobuf_SetUserAvatarReq_metadata.data
};

void SetUserAvatarReq::registerTypes()
{
    qRegisterMetaType<SetUserAvatarReq>();
    qRegisterMetaType<SetUserAvatarReqRepeated>();
}

SetUserAvatarReq::SetUserAvatarReq()
    : QProtobufMessage(&SetUserAvatarReq::staticMetaObject),
      dptr(new SetUserAvatarReq_QtProtobufData)
{
}

SetUserAvatarReq::SetUserAvatarReq(const SetUserAvatarReq &other)
    : QProtobufMessage(other),
      dptr(other.dptr)
{
}
SetUserAvatarReq &SetUserAvatarReq::operator =(const SetUserAvatarReq &other)
{
    QProtobufMessage::operator=(other);
    dptr = other.dptr;
    return *this;
}
SetUserAvatarReq::SetUserAvatarReq(SetUserAvatarReq &&other) noexcept
    : QProtobufMessage(std::move(other)),
      dptr(std::move(other.dptr))
{
}
SetUserAvatarReq &SetUserAvatarReq::operator =(SetUserAvatarReq &&other) noexcept
{
    QProtobufMessage::operator=(std::move(other));
    dptr.swap(other.dptr);
    return *this;
}
bool SetUserAvatarReq::operator ==(const SetUserAvatarReq &other) const
{
    return QProtobufMessage::isEqual(*this, other)
        && dptr->m_requestId == other.dptr->m_requestId
        && dptr->m_userId == other.dptr->m_userId
        && dptr->m_sessionId == other.dptr->m_sessionId
        && dptr->m_avatar == other.dptr->m_avatar;
}

bool SetUserAvatarReq::operator !=(const SetUserAvatarReq &other) const
{
    return !this->operator ==(other);
}

QString SetUserAvatarReq::requestId() const
{
    return dptr->m_requestId;
}

QString SetUserAvatarReq::userId_p() const
{
    return dptr->m_userId ?
        dptr->m_userId.value() : QString();
}

bool SetUserAvatarReq::hasUserId() const
{
    return dptr->m_userId.has_value();
}
QString SetUserAvatarReq::userId() const
{
    Q_ASSERT(dptr->m_userId.has_value());
    return dptr->m_userId.value();
}

QString SetUserAvatarReq::sessionId_p() const
{
    return dptr->m_sessionId ?
        dptr->m_sessionId.value() : QString();
}

bool SetUserAvatarReq::hasSessionId() const
{
    return dptr->m_sessionId.has_value();
}
QString SetUserAvatarReq::sessionId() const
{
    Q_ASSERT(dptr->m_sessionId.has_value());
    return dptr->m_sessionId.value();
}

QByteArray SetUserAvatarReq::avatar() const
{
    return dptr->m_avatar;
}

void SetUserAvatarReq::setRequestId(const QString &requestId)
{
    if (dptr->m_requestId != requestId) {
        dptr.detach();
        dptr->m_requestId = requestId;
    }
}

void SetUserAvatarReq::setUserId(const QString &userId)
{
    if (!dptr->m_userId || dptr->m_userId.value() != userId) {
        dptr.detach();
        dptr->m_userId = userId;
    }
}

void SetUserAvatarReq::setUserId_p(QString userId)
{
    if (!dptr->m_userId || dptr->m_userId != userId) {
        dptr.detach();
        dptr->m_userId = userId;
    }
}

void SetUserAvatarReq::clearUserId()
{
    if (dptr->m_userId.has_value()) {
        dptr.detach();
        dptr->m_userId.reset();
    }
}
void SetUserAvatarReq::setSessionId(const QString &sessionId)
{
    if (!dptr->m_sessionId || dptr->m_sessionId.value() != sessionId) {
        dptr.detach();
        dptr->m_sessionId = sessionId;
    }
}

void SetUserAvatarReq::setSessionId_p(QString sessionId)
{
    if (!dptr->m_sessionId || dptr->m_sessionId != sessionId) {
        dptr.detach();
        dptr->m_sessionId = sessionId;
    }
}

void SetUserAvatarReq::clearSessionId()
{
    if (dptr->m_sessionId.has_value()) {
        dptr.detach();
        dptr->m_sessionId.reset();
    }
}
void SetUserAvatarReq::setAvatar(const QByteArray &avatar)
{
    if (dptr->m_avatar != avatar) {
        dptr.detach();
        dptr->m_avatar = avatar;
    }
}


class SetUserAvatarRsp_QtProtobufData : public QSharedData
{
public:
    SetUserAvatarRsp_QtProtobufData()
        : QSharedData(),
          m_success(false)
    {
    }

    SetUserAvatarRsp_QtProtobufData(const SetUserAvatarRsp_QtProtobufData &other)
        : QSharedData(other),
          m_requestId(other.m_requestId),
          m_success(other.m_success),
          m_errmsg(other.m_errmsg)
    {
    }

    QString m_requestId;
    bool m_success;
    QString m_errmsg;
};

SetUserAvatarRsp::~SetUserAvatarRsp() = default;

static constexpr struct {
    QtProtobufPrivate::QProtobufPropertyOrdering::Data data;
    const std::array<uint, 13> qt_protobuf_SetUserAvatarRsp_uint_data;
    const char qt_protobuf_SetUserAvatarRsp_char_data[51];
} qt_protobuf_SetUserAvatarRsp_metadata {
    // data
    {
        0, /* = version */
        3, /* = num fields */
        4, /* = field number offset */
        7, /* = property index offset */
        10, /* = field flags offset */
        24, /* = message full name length */
    },
    // uint_data
    {
        // JSON name offsets:
        25, /* = requestId */
        35, /* = success */
        43, /* = errmsg */
        50, /* = end-of-string-marker */
        // Field numbers:
        1, /* = requestId */
        2, /* = success */
        3, /* = errmsg */
        // Property indices:
        0, /* = requestId */
        1, /* = success */
        2, /* = errmsg */
        // Field flags:
        QtProtobufPrivate::NoFlags, /* = requestId */
        QtProtobufPrivate::NoFlags, /* = success */
        QtProtobufPrivate::NoFlags, /* = errmsg */
    },
    // char_data
    /* metadata char_data: */
    "bite_im.SetUserAvatarRsp\0" /* = full message name */
    /* field char_data: */
    "requestId\0success\0errmsg\0"
};

const QtProtobufPrivate::QProtobufPropertyOrdering SetUserAvatarRsp::propertyOrdering = {
    &qt_protobuf_SetUserAvatarRsp_metadata.data
};

void SetUserAvatarRsp::registerTypes()
{
    qRegisterMetaType<SetUserAvatarRsp>();
    qRegisterMetaType<SetUserAvatarRspRepeated>();
}

SetUserAvatarRsp::SetUserAvatarRsp()
    : QProtobufMessage(&SetUserAvatarRsp::staticMetaObject),
      dptr(new SetUserAvatarRsp_QtProtobufData)
{
}

SetUserAvatarRsp::SetUserAvatarRsp(const SetUserAvatarRsp &other)
    : QProtobufMessage(other),
      dptr(other.dptr)
{
}
SetUserAvatarRsp &SetUserAvatarRsp::operator =(const SetUserAvatarRsp &other)
{
    QProtobufMessage::operator=(other);
    dptr = other.dptr;
    return *this;
}
SetUserAvatarRsp::SetUserAvatarRsp(SetUserAvatarRsp &&other) noexcept
    : QProtobufMessage(std::move(other)),
      dptr(std::move(other.dptr))
{
}
SetUserAvatarRsp &SetUserAvatarRsp::operator =(SetUserAvatarRsp &&other) noexcept
{
    QProtobufMessage::operator=(std::move(other));
    dptr.swap(other.dptr);
    return *this;
}
bool SetUserAvatarRsp::operator ==(const SetUserAvatarRsp &other) const
{
    return QProtobufMessage::isEqual(*this, other)
        && dptr->m_requestId == other.dptr->m_requestId
        && dptr->m_success == other.dptr->m_success
        && dptr->m_errmsg == other.dptr->m_errmsg;
}

bool SetUserAvatarRsp::operator !=(const SetUserAvatarRsp &other) const
{
    return !this->operator ==(other);
}

QString SetUserAvatarRsp::requestId() const
{
    return dptr->m_requestId;
}

bool SetUserAvatarRsp::success() const
{
    return dptr->m_success;
}

QString SetUserAvatarRsp::errmsg() const
{
    return dptr->m_errmsg;
}

void SetUserAvatarRsp::setRequestId(const QString &requestId)
{
    if (dptr->m_requestId != requestId) {
        dptr.detach();
        dptr->m_requestId = requestId;
    }
}

void SetUserAvatarRsp::setSuccess(const bool &success)
{
    if (dptr->m_success != success) {
        dptr.detach();
        dptr->m_success = success;
    }
}

void SetUserAvatarRsp::setErrmsg(const QString &errmsg)
{
    if (dptr->m_errmsg != errmsg) {
        dptr.detach();
        dptr->m_errmsg = errmsg;
    }
}


class SetUserNicknameReq_QtProtobufData : public QSharedData
{
public:
    SetUserNicknameReq_QtProtobufData()
        : QSharedData()
    {
    }

    SetUserNicknameReq_QtProtobufData(const SetUserNicknameReq_QtProtobufData &other)
        : QSharedData(other),
          m_requestId(other.m_requestId),
          m_userId(other.m_userId),
          m_sessionId(other.m_sessionId),
          m_nickname(other.m_nickname)
    {
    }

    QString m_requestId;
    std::optional<QString> m_userId;
    std::optional<QString> m_sessionId;
    QString m_nickname;
};

SetUserNicknameReq::~SetUserNicknameReq() = default;

static constexpr struct {
    QtProtobufPrivate::QProtobufPropertyOrdering::Data data;
    const std::array<uint, 17> qt_protobuf_SetUserNicknameReq_uint_data;
    const char qt_protobuf_SetUserNicknameReq_char_data[64];
} qt_protobuf_SetUserNicknameReq_metadata {
    // data
    {
        0, /* = version */
        4, /* = num fields */
        5, /* = field number offset */
        9, /* = property index offset */
        13, /* = field flags offset */
        26, /* = message full name length */
    },
    // uint_data
    {
        // JSON name offsets:
        27, /* = requestId */
        37, /* = userId */
        44, /* = sessionId */
        54, /* = nickname */
        63, /* = end-of-string-marker */
        // Field numbers:
        1, /* = requestId */
        2, /* = userId */
        3, /* = sessionId */
        4, /* = nickname */
        // Property indices:
        0, /* = requestId */
        1, /* = userId */
        3, /* = sessionId */
        5, /* = nickname */
        // Field flags:
        QtProtobufPrivate::NoFlags, /* = requestId */
        QtProtobufPrivate::Optional, /* = userId */
        QtProtobufPrivate::Optional, /* = sessionId */
        QtProtobufPrivate::NoFlags, /* = nickname */
    },
    // char_data
    /* metadata char_data: */
    "bite_im.SetUserNicknameReq\0" /* = full message name */
    /* field char_data: */
    "requestId\0userId\0sessionId\0nickname\0"
};

const QtProtobufPrivate::QProtobufPropertyOrdering SetUserNicknameReq::propertyOrdering = {
    &qt_protobuf_SetUserNicknameReq_metadata.data
};

void SetUserNicknameReq::registerTypes()
{
    qRegisterMetaType<SetUserNicknameReq>();
    qRegisterMetaType<SetUserNicknameReqRepeated>();
}

SetUserNicknameReq::SetUserNicknameReq()
    : QProtobufMessage(&SetUserNicknameReq::staticMetaObject),
      dptr(new SetUserNicknameReq_QtProtobufData)
{
}

SetUserNicknameReq::SetUserNicknameReq(const SetUserNicknameReq &other)
    : QProtobufMessage(other),
      dptr(other.dptr)
{
}
SetUserNicknameReq &SetUserNicknameReq::operator =(const SetUserNicknameReq &other)
{
    QProtobufMessage::operator=(other);
    dptr = other.dptr;
    return *this;
}
SetUserNicknameReq::SetUserNicknameReq(SetUserNicknameReq &&other) noexcept
    : QProtobufMessage(std::move(other)),
      dptr(std::move(other.dptr))
{
}
SetUserNicknameReq &SetUserNicknameReq::operator =(SetUserNicknameReq &&other) noexcept
{
    QProtobufMessage::operator=(std::move(other));
    dptr.swap(other.dptr);
    return *this;
}
bool SetUserNicknameReq::operator ==(const SetUserNicknameReq &other) const
{
    return QProtobufMessage::isEqual(*this, other)
        && dptr->m_requestId == other.dptr->m_requestId
        && dptr->m_userId == other.dptr->m_userId
        && dptr->m_sessionId == other.dptr->m_sessionId
        && dptr->m_nickname == other.dptr->m_nickname;
}

bool SetUserNicknameReq::operator !=(const SetUserNicknameReq &other) const
{
    return !this->operator ==(other);
}

QString SetUserNicknameReq::requestId() const
{
    return dptr->m_requestId;
}

QString SetUserNicknameReq::userId_p() const
{
    return dptr->m_userId ?
        dptr->m_userId.value() : QString();
}

bool SetUserNicknameReq::hasUserId() const
{
    return dptr->m_userId.has_value();
}
QString SetUserNicknameReq::userId() const
{
    Q_ASSERT(dptr->m_userId.has_value());
    return dptr->m_userId.value();
}

QString SetUserNicknameReq::sessionId_p() const
{
    return dptr->m_sessionId ?
        dptr->m_sessionId.value() : QString();
}

bool SetUserNicknameReq::hasSessionId() const
{
    return dptr->m_sessionId.has_value();
}
QString SetUserNicknameReq::sessionId() const
{
    Q_ASSERT(dptr->m_sessionId.has_value());
    return dptr->m_sessionId.value();
}

QString SetUserNicknameReq::nickname() const
{
    return dptr->m_nickname;
}

void SetUserNicknameReq::setRequestId(const QString &requestId)
{
    if (dptr->m_requestId != requestId) {
        dptr.detach();
        dptr->m_requestId = requestId;
    }
}

void SetUserNicknameReq::setUserId(const QString &userId)
{
    if (!dptr->m_userId || dptr->m_userId.value() != userId) {
        dptr.detach();
        dptr->m_userId = userId;
    }
}

void SetUserNicknameReq::setUserId_p(QString userId)
{
    if (!dptr->m_userId || dptr->m_userId != userId) {
        dptr.detach();
        dptr->m_userId = userId;
    }
}

void SetUserNicknameReq::clearUserId()
{
    if (dptr->m_userId.has_value()) {
        dptr.detach();
        dptr->m_userId.reset();
    }
}
void SetUserNicknameReq::setSessionId(const QString &sessionId)
{
    if (!dptr->m_sessionId || dptr->m_sessionId.value() != sessionId) {
        dptr.detach();
        dptr->m_sessionId = sessionId;
    }
}

void SetUserNicknameReq::setSessionId_p(QString sessionId)
{
    if (!dptr->m_sessionId || dptr->m_sessionId != sessionId) {
        dptr.detach();
        dptr->m_sessionId = sessionId;
    }
}

void SetUserNicknameReq::clearSessionId()
{
    if (dptr->m_sessionId.has_value()) {
        dptr.detach();
        dptr->m_sessionId.reset();
    }
}
void SetUserNicknameReq::setNickname(const QString &nickname)
{
    if (dptr->m_nickname != nickname) {
        dptr.detach();
        dptr->m_nickname = nickname;
    }
}


class SetUserNicknameRsp_QtProtobufData : public QSharedData
{
public:
    SetUserNicknameRsp_QtProtobufData()
        : QSharedData(),
          m_success(false)
    {
    }

    SetUserNicknameRsp_QtProtobufData(const SetUserNicknameRsp_QtProtobufData &other)
        : QSharedData(other),
          m_requestId(other.m_requestId),
          m_success(other.m_success),
          m_errmsg(other.m_errmsg)
    {
    }

    QString m_requestId;
    bool m_success;
    QString m_errmsg;
};

SetUserNicknameRsp::~SetUserNicknameRsp() = default;

static constexpr struct {
    QtProtobufPrivate::QProtobufPropertyOrdering::Data data;
    const std::array<uint, 13> qt_protobuf_SetUserNicknameRsp_uint_data;
    const char qt_protobuf_SetUserNicknameRsp_char_data[53];
} qt_protobuf_SetUserNicknameRsp_metadata {
    // data
    {
        0, /* = version */
        3, /* = num fields */
        4, /* = field number offset */
        7, /* = property index offset */
        10, /* = field flags offset */
        26, /* = message full name length */
    },
    // uint_data
    {
        // JSON name offsets:
        27, /* = requestId */
        37, /* = success */
        45, /* = errmsg */
        52, /* = end-of-string-marker */
        // Field numbers:
        1, /* = requestId */
        2, /* = success */
        3, /* = errmsg */
        // Property indices:
        0, /* = requestId */
        1, /* = success */
        2, /* = errmsg */
        // Field flags:
        QtProtobufPrivate::NoFlags, /* = requestId */
        QtProtobufPrivate::NoFlags, /* = success */
        QtProtobufPrivate::NoFlags, /* = errmsg */
    },
    // char_data
    /* metadata char_data: */
    "bite_im.SetUserNicknameRsp\0" /* = full message name */
    /* field char_data: */
    "requestId\0success\0errmsg\0"
};

const QtProtobufPrivate::QProtobufPropertyOrdering SetUserNicknameRsp::propertyOrdering = {
    &qt_protobuf_SetUserNicknameRsp_metadata.data
};

void SetUserNicknameRsp::registerTypes()
{
    qRegisterMetaType<SetUserNicknameRsp>();
    qRegisterMetaType<SetUserNicknameRspRepeated>();
}

SetUserNicknameRsp::SetUserNicknameRsp()
    : QProtobufMessage(&SetUserNicknameRsp::staticMetaObject),
      dptr(new SetUserNicknameRsp_QtProtobufData)
{
}

SetUserNicknameRsp::SetUserNicknameRsp(const SetUserNicknameRsp &other)
    : QProtobufMessage(other),
      dptr(other.dptr)
{
}
SetUserNicknameRsp &SetUserNicknameRsp::operator =(const SetUserNicknameRsp &other)
{
    QProtobufMessage::operator=(other);
    dptr = other.dptr;
    return *this;
}
SetUserNicknameRsp::SetUserNicknameRsp(SetUserNicknameRsp &&other) noexcept
    : QProtobufMessage(std::move(other)),
      dptr(std::move(other.dptr))
{
}
SetUserNicknameRsp &SetUserNicknameRsp::operator =(SetUserNicknameRsp &&other) noexcept
{
    QProtobufMessage::operator=(std::move(other));
    dptr.swap(other.dptr);
    return *this;
}
bool SetUserNicknameRsp::operator ==(const SetUserNicknameRsp &other) const
{
    return QProtobufMessage::isEqual(*this, other)
        && dptr->m_requestId == other.dptr->m_requestId
        && dptr->m_success == other.dptr->m_success
        && dptr->m_errmsg == other.dptr->m_errmsg;
}

bool SetUserNicknameRsp::operator !=(const SetUserNicknameRsp &other) const
{
    return !this->operator ==(other);
}

QString SetUserNicknameRsp::requestId() const
{
    return dptr->m_requestId;
}

bool SetUserNicknameRsp::success() const
{
    return dptr->m_success;
}

QString SetUserNicknameRsp::errmsg() const
{
    return dptr->m_errmsg;
}

void SetUserNicknameRsp::setRequestId(const QString &requestId)
{
    if (dptr->m_requestId != requestId) {
        dptr.detach();
        dptr->m_requestId = requestId;
    }
}

void SetUserNicknameRsp::setSuccess(const bool &success)
{
    if (dptr->m_success != success) {
        dptr.detach();
        dptr->m_success = success;
    }
}

void SetUserNicknameRsp::setErrmsg(const QString &errmsg)
{
    if (dptr->m_errmsg != errmsg) {
        dptr.detach();
        dptr->m_errmsg = errmsg;
    }
}


class SetUserDescriptionReq_QtProtobufData : public QSharedData
{
public:
    SetUserDescriptionReq_QtProtobufData()
        : QSharedData()
    {
    }

    SetUserDescriptionReq_QtProtobufData(const SetUserDescriptionReq_QtProtobufData &other)
        : QSharedData(other),
          m_requestId(other.m_requestId),
          m_userId(other.m_userId),
          m_sessionId(other.m_sessionId),
          m_description(other.m_description)
    {
    }

    QString m_requestId;
    std::optional<QString> m_userId;
    std::optional<QString> m_sessionId;
    QString m_description;
};

SetUserDescriptionReq::~SetUserDescriptionReq() = default;

static constexpr struct {
    QtProtobufPrivate::QProtobufPropertyOrdering::Data data;
    const std::array<uint, 17> qt_protobuf_SetUserDescriptionReq_uint_data;
    const char qt_protobuf_SetUserDescriptionReq_char_data[70];
} qt_protobuf_SetUserDescriptionReq_metadata {
    // data
    {
        0, /* = version */
        4, /* = num fields */
        5, /* = field number offset */
        9, /* = property index offset */
        13, /* = field flags offset */
        29, /* = message full name length */
    },
    // uint_data
    {
        // JSON name offsets:
        30, /* = requestId */
        40, /* = userId */
        47, /* = sessionId */
        57, /* = description */
        69, /* = end-of-string-marker */
        // Field numbers:
        1, /* = requestId */
        2, /* = userId */
        3, /* = sessionId */
        4, /* = description */
        // Property indices:
        0, /* = requestId */
        1, /* = userId */
        3, /* = sessionId */
        5, /* = description */
        // Field flags:
        QtProtobufPrivate::NoFlags, /* = requestId */
        QtProtobufPrivate::Optional, /* = userId */
        QtProtobufPrivate::Optional, /* = sessionId */
        QtProtobufPrivate::NoFlags, /* = description */
    },
    // char_data
    /* metadata char_data: */
    "bite_im.SetUserDescriptionReq\0" /* = full message name */
    /* field char_data: */
    "requestId\0userId\0sessionId\0description\0"
};

const QtProtobufPrivate::QProtobufPropertyOrdering SetUserDescriptionReq::propertyOrdering = {
    &qt_protobuf_SetUserDescriptionReq_metadata.data
};

void SetUserDescriptionReq::registerTypes()
{
    qRegisterMetaType<SetUserDescriptionReq>();
    qRegisterMetaType<SetUserDescriptionReqRepeated>();
}

SetUserDescriptionReq::SetUserDescriptionReq()
    : QProtobufMessage(&SetUserDescriptionReq::staticMetaObject),
      dptr(new SetUserDescriptionReq_QtProtobufData)
{
}

SetUserDescriptionReq::SetUserDescriptionReq(const SetUserDescriptionReq &other)
    : QProtobufMessage(other),
      dptr(other.dptr)
{
}
SetUserDescriptionReq &SetUserDescriptionReq::operator =(const SetUserDescriptionReq &other)
{
    QProtobufMessage::operator=(other);
    dptr = other.dptr;
    return *this;
}
SetUserDescriptionReq::SetUserDescriptionReq(SetUserDescriptionReq &&other) noexcept
    : QProtobufMessage(std::move(other)),
      dptr(std::move(other.dptr))
{
}
SetUserDescriptionReq &SetUserDescriptionReq::operator =(SetUserDescriptionReq &&other) noexcept
{
    QProtobufMessage::operator=(std::move(other));
    dptr.swap(other.dptr);
    return *this;
}
bool SetUserDescriptionReq::operator ==(const SetUserDescriptionReq &other) const
{
    return QProtobufMessage::isEqual(*this, other)
        && dptr->m_requestId == other.dptr->m_requestId
        && dptr->m_userId == other.dptr->m_userId
        && dptr->m_sessionId == other.dptr->m_sessionId
        && dptr->m_description == other.dptr->m_description;
}

bool SetUserDescriptionReq::operator !=(const SetUserDescriptionReq &other) const
{
    return !this->operator ==(other);
}

QString SetUserDescriptionReq::requestId() const
{
    return dptr->m_requestId;
}

QString SetUserDescriptionReq::userId_p() const
{
    return dptr->m_userId ?
        dptr->m_userId.value() : QString();
}

bool SetUserDescriptionReq::hasUserId() const
{
    return dptr->m_userId.has_value();
}
QString SetUserDescriptionReq::userId() const
{
    Q_ASSERT(dptr->m_userId.has_value());
    return dptr->m_userId.value();
}

QString SetUserDescriptionReq::sessionId_p() const
{
    return dptr->m_sessionId ?
        dptr->m_sessionId.value() : QString();
}

bool SetUserDescriptionReq::hasSessionId() const
{
    return dptr->m_sessionId.has_value();
}
QString SetUserDescriptionReq::sessionId() const
{
    Q_ASSERT(dptr->m_sessionId.has_value());
    return dptr->m_sessionId.value();
}

QString SetUserDescriptionReq::description() const
{
    return dptr->m_description;
}

void SetUserDescriptionReq::setRequestId(const QString &requestId)
{
    if (dptr->m_requestId != requestId) {
        dptr.detach();
        dptr->m_requestId = requestId;
    }
}

void SetUserDescriptionReq::setUserId(const QString &userId)
{
    if (!dptr->m_userId || dptr->m_userId.value() != userId) {
        dptr.detach();
        dptr->m_userId = userId;
    }
}

void SetUserDescriptionReq::setUserId_p(QString userId)
{
    if (!dptr->m_userId || dptr->m_userId != userId) {
        dptr.detach();
        dptr->m_userId = userId;
    }
}

void SetUserDescriptionReq::clearUserId()
{
    if (dptr->m_userId.has_value()) {
        dptr.detach();
        dptr->m_userId.reset();
    }
}
void SetUserDescriptionReq::setSessionId(const QString &sessionId)
{
    if (!dptr->m_sessionId || dptr->m_sessionId.value() != sessionId) {
        dptr.detach();
        dptr->m_sessionId = sessionId;
    }
}

void SetUserDescriptionReq::setSessionId_p(QString sessionId)
{
    if (!dptr->m_sessionId || dptr->m_sessionId != sessionId) {
        dptr.detach();
        dptr->m_sessionId = sessionId;
    }
}

void SetUserDescriptionReq::clearSessionId()
{
    if (dptr->m_sessionId.has_value()) {
        dptr.detach();
        dptr->m_sessionId.reset();
    }
}
void SetUserDescriptionReq::setDescription(const QString &description)
{
    if (dptr->m_description != description) {
        dptr.detach();
        dptr->m_description = description;
    }
}


class SetUserDescriptionRsp_QtProtobufData : public QSharedData
{
public:
    SetUserDescriptionRsp_QtProtobufData()
        : QSharedData(),
          m_success(false)
    {
    }

    SetUserDescriptionRsp_QtProtobufData(const SetUserDescriptionRsp_QtProtobufData &other)
        : QSharedData(other),
          m_requestId(other.m_requestId),
          m_success(other.m_success),
          m_errmsg(other.m_errmsg)
    {
    }

    QString m_requestId;
    bool m_success;
    QString m_errmsg;
};

SetUserDescriptionRsp::~SetUserDescriptionRsp() = default;

static constexpr struct {
    QtProtobufPrivate::QProtobufPropertyOrdering::Data data;
    const std::array<uint, 13> qt_protobuf_SetUserDescriptionRsp_uint_data;
    const char qt_protobuf_SetUserDescriptionRsp_char_data[56];
} qt_protobuf_SetUserDescriptionRsp_metadata {
    // data
    {
        0, /* = version */
        3, /* = num fields */
        4, /* = field number offset */
        7, /* = property index offset */
        10, /* = field flags offset */
        29, /* = message full name length */
    },
    // uint_data
    {
        // JSON name offsets:
        30, /* = requestId */
        40, /* = success */
        48, /* = errmsg */
        55, /* = end-of-string-marker */
        // Field numbers:
        1, /* = requestId */
        2, /* = success */
        3, /* = errmsg */
        // Property indices:
        0, /* = requestId */
        1, /* = success */
        2, /* = errmsg */
        // Field flags:
        QtProtobufPrivate::NoFlags, /* = requestId */
        QtProtobufPrivate::NoFlags, /* = success */
        QtProtobufPrivate::NoFlags, /* = errmsg */
    },
    // char_data
    /* metadata char_data: */
    "bite_im.SetUserDescriptionRsp\0" /* = full message name */
    /* field char_data: */
    "requestId\0success\0errmsg\0"
};

const QtProtobufPrivate::QProtobufPropertyOrdering SetUserDescriptionRsp::propertyOrdering = {
    &qt_protobuf_SetUserDescriptionRsp_metadata.data
};

void SetUserDescriptionRsp::registerTypes()
{
    qRegisterMetaType<SetUserDescriptionRsp>();
    qRegisterMetaType<SetUserDescriptionRspRepeated>();
}

SetUserDescriptionRsp::SetUserDescriptionRsp()
    : QProtobufMessage(&SetUserDescriptionRsp::staticMetaObject),
      dptr(new SetUserDescriptionRsp_QtProtobufData)
{
}

SetUserDescriptionRsp::SetUserDescriptionRsp(const SetUserDescriptionRsp &other)
    : QProtobufMessage(other),
      dptr(other.dptr)
{
}
SetUserDescriptionRsp &SetUserDescriptionRsp::operator =(const SetUserDescriptionRsp &other)
{
    QProtobufMessage::operator=(other);
    dptr = other.dptr;
    return *this;
}
SetUserDescriptionRsp::SetUserDescriptionRsp(SetUserDescriptionRsp &&other) noexcept
    : QProtobufMessage(std::move(other)),
      dptr(std::move(other.dptr))
{
}
SetUserDescriptionRsp &SetUserDescriptionRsp::operator =(SetUserDescriptionRsp &&other) noexcept
{
    QProtobufMessage::operator=(std::move(other));
    dptr.swap(other.dptr);
    return *this;
}
bool SetUserDescriptionRsp::operator ==(const SetUserDescriptionRsp &other) const
{
    return QProtobufMessage::isEqual(*this, other)
        && dptr->m_requestId == other.dptr->m_requestId
        && dptr->m_success == other.dptr->m_success
        && dptr->m_errmsg == other.dptr->m_errmsg;
}

bool SetUserDescriptionRsp::operator !=(const SetUserDescriptionRsp &other) const
{
    return !this->operator ==(other);
}

QString SetUserDescriptionRsp::requestId() const
{
    return dptr->m_requestId;
}

bool SetUserDescriptionRsp::success() const
{
    return dptr->m_success;
}

QString SetUserDescriptionRsp::errmsg() const
{
    return dptr->m_errmsg;
}

void SetUserDescriptionRsp::setRequestId(const QString &requestId)
{
    if (dptr->m_requestId != requestId) {
        dptr.detach();
        dptr->m_requestId = requestId;
    }
}

void SetUserDescriptionRsp::setSuccess(const bool &success)
{
    if (dptr->m_success != success) {
        dptr.detach();
        dptr->m_success = success;
    }
}

void SetUserDescriptionRsp::setErrmsg(const QString &errmsg)
{
    if (dptr->m_errmsg != errmsg) {
        dptr.detach();
        dptr->m_errmsg = errmsg;
    }
}


class SetUserPhoneNumberReq_QtProtobufData : public QSharedData
{
public:
    SetUserPhoneNumberReq_QtProtobufData()
        : QSharedData()
    {
    }

    SetUserPhoneNumberReq_QtProtobufData(const SetUserPhoneNumberReq_QtProtobufData &other)
        : QSharedData(other),
          m_requestId(other.m_requestId),
          m_userId(other.m_userId),
          m_sessionId(other.m_sessionId),
          m_phoneNumber(other.m_phoneNumber),
          m_phoneVerifyCodeId(other.m_phoneVerifyCodeId),
          m_phoneVerifyCode(other.m_phoneVerifyCode)
    {
    }

    QString m_requestId;
    std::optional<QString> m_userId;
    std::optional<QString> m_sessionId;
    QString m_phoneNumber;
    QString m_phoneVerifyCodeId;
    QString m_phoneVerifyCode;
};

SetUserPhoneNumberReq::~SetUserPhoneNumberReq() = default;

static constexpr struct {
    QtProtobufPrivate::QProtobufPropertyOrdering::Data data;
    const std::array<uint, 25> qt_protobuf_SetUserPhoneNumberReq_uint_data;
    const char qt_protobuf_SetUserPhoneNumberReq_char_data[104];
} qt_protobuf_SetUserPhoneNumberReq_metadata {
    // data
    {
        0, /* = version */
        6, /* = num fields */
        7, /* = field number offset */
        13, /* = property index offset */
        19, /* = field flags offset */
        29, /* = message full name length */
    },
    // uint_data
    {
        // JSON name offsets:
        30, /* = requestId */
        40, /* = userId */
        47, /* = sessionId */
        57, /* = phoneNumber */
        69, /* = phoneVerifyCodeId */
        87, /* = phoneVerifyCode */
        103, /* = end-of-string-marker */
        // Field numbers:
        1, /* = requestId */
        2, /* = userId */
        3, /* = sessionId */
        4, /* = phoneNumber */
        5, /* = phoneVerifyCodeId */
        6, /* = phoneVerifyCode */
        // Property indices:
        0, /* = requestId */
        1, /* = userId */
        3, /* = sessionId */
        5, /* = phoneNumber */
        6, /* = phoneVerifyCodeId */
        7, /* = phoneVerifyCode */
        // Field flags:
        QtProtobufPrivate::NoFlags, /* = requestId */
        QtProtobufPrivate::Optional, /* = userId */
        QtProtobufPrivate::Optional, /* = sessionId */
        QtProtobufPrivate::NoFlags, /* = phoneNumber */
        QtProtobufPrivate::NoFlags, /* = phoneVerifyCodeId */
        QtProtobufPrivate::NoFlags, /* = phoneVerifyCode */
    },
    // char_data
    /* metadata char_data: */
    "bite_im.SetUserPhoneNumberReq\0" /* = full message name */
    /* field char_data: */
    "requestId\0userId\0sessionId\0phoneNumber\0phoneVerifyCodeId\0"
    "phoneVerifyCode\0"
};

const QtProtobufPrivate::QProtobufPropertyOrdering SetUserPhoneNumberReq::propertyOrdering = {
    &qt_protobuf_SetUserPhoneNumberReq_metadata.data
};

void SetUserPhoneNumberReq::registerTypes()
{
    qRegisterMetaType<SetUserPhoneNumberReq>();
    qRegisterMetaType<SetUserPhoneNumberReqRepeated>();
}

SetUserPhoneNumberReq::SetUserPhoneNumberReq()
    : QProtobufMessage(&SetUserPhoneNumberReq::staticMetaObject),
      dptr(new SetUserPhoneNumberReq_QtProtobufData)
{
}

SetUserPhoneNumberReq::SetUserPhoneNumberReq(const SetUserPhoneNumberReq &other)
    : QProtobufMessage(other),
      dptr(other.dptr)
{
}
SetUserPhoneNumberReq &SetUserPhoneNumberReq::operator =(const SetUserPhoneNumberReq &other)
{
    QProtobufMessage::operator=(other);
    dptr = other.dptr;
    return *this;
}
SetUserPhoneNumberReq::SetUserPhoneNumberReq(SetUserPhoneNumberReq &&other) noexcept
    : QProtobufMessage(std::move(other)),
      dptr(std::move(other.dptr))
{
}
SetUserPhoneNumberReq &SetUserPhoneNumberReq::operator =(SetUserPhoneNumberReq &&other) noexcept
{
    QProtobufMessage::operator=(std::move(other));
    dptr.swap(other.dptr);
    return *this;
}
bool SetUserPhoneNumberReq::operator ==(const SetUserPhoneNumberReq &other) const
{
    return QProtobufMessage::isEqual(*this, other)
        && dptr->m_requestId == other.dptr->m_requestId
        && dptr->m_userId == other.dptr->m_userId
        && dptr->m_sessionId == other.dptr->m_sessionId
        && dptr->m_phoneNumber == other.dptr->m_phoneNumber
        && dptr->m_phoneVerifyCodeId == other.dptr->m_phoneVerifyCodeId
        && dptr->m_phoneVerifyCode == other.dptr->m_phoneVerifyCode;
}

bool SetUserPhoneNumberReq::operator !=(const SetUserPhoneNumberReq &other) const
{
    return !this->operator ==(other);
}

QString SetUserPhoneNumberReq::requestId() const
{
    return dptr->m_requestId;
}

QString SetUserPhoneNumberReq::userId_p() const
{
    return dptr->m_userId ?
        dptr->m_userId.value() : QString();
}

bool SetUserPhoneNumberReq::hasUserId() const
{
    return dptr->m_userId.has_value();
}
QString SetUserPhoneNumberReq::userId() const
{
    Q_ASSERT(dptr->m_userId.has_value());
    return dptr->m_userId.value();
}

QString SetUserPhoneNumberReq::sessionId_p() const
{
    return dptr->m_sessionId ?
        dptr->m_sessionId.value() : QString();
}

bool SetUserPhoneNumberReq::hasSessionId() const
{
    return dptr->m_sessionId.has_value();
}
QString SetUserPhoneNumberReq::sessionId() const
{
    Q_ASSERT(dptr->m_sessionId.has_value());
    return dptr->m_sessionId.value();
}

QString SetUserPhoneNumberReq::phoneNumber() const
{
    return dptr->m_phoneNumber;
}

QString SetUserPhoneNumberReq::phoneVerifyCodeId() const
{
    return dptr->m_phoneVerifyCodeId;
}

QString SetUserPhoneNumberReq::phoneVerifyCode() const
{
    return dptr->m_phoneVerifyCode;
}

void SetUserPhoneNumberReq::setRequestId(const QString &requestId)
{
    if (dptr->m_requestId != requestId) {
        dptr.detach();
        dptr->m_requestId = requestId;
    }
}

void SetUserPhoneNumberReq::setUserId(const QString &userId)
{
    if (!dptr->m_userId || dptr->m_userId.value() != userId) {
        dptr.detach();
        dptr->m_userId = userId;
    }
}

void SetUserPhoneNumberReq::setUserId_p(QString userId)
{
    if (!dptr->m_userId || dptr->m_userId != userId) {
        dptr.detach();
        dptr->m_userId = userId;
    }
}

void SetUserPhoneNumberReq::clearUserId()
{
    if (dptr->m_userId.has_value()) {
        dptr.detach();
        dptr->m_userId.reset();
    }
}
void SetUserPhoneNumberReq::setSessionId(const QString &sessionId)
{
    if (!dptr->m_sessionId || dptr->m_sessionId.value() != sessionId) {
        dptr.detach();
        dptr->m_sessionId = sessionId;
    }
}

void SetUserPhoneNumberReq::setSessionId_p(QString sessionId)
{
    if (!dptr->m_sessionId || dptr->m_sessionId != sessionId) {
        dptr.detach();
        dptr->m_sessionId = sessionId;
    }
}

void SetUserPhoneNumberReq::clearSessionId()
{
    if (dptr->m_sessionId.has_value()) {
        dptr.detach();
        dptr->m_sessionId.reset();
    }
}
void SetUserPhoneNumberReq::setPhoneNumber(const QString &phoneNumber)
{
    if (dptr->m_phoneNumber != phoneNumber) {
        dptr.detach();
        dptr->m_phoneNumber = phoneNumber;
    }
}

void SetUserPhoneNumberReq::setPhoneVerifyCodeId(const QString &phoneVerifyCodeId)
{
    if (dptr->m_phoneVerifyCodeId != phoneVerifyCodeId) {
        dptr.detach();
        dptr->m_phoneVerifyCodeId = phoneVerifyCodeId;
    }
}

void SetUserPhoneNumberReq::setPhoneVerifyCode(const QString &phoneVerifyCode)
{
    if (dptr->m_phoneVerifyCode != phoneVerifyCode) {
        dptr.detach();
        dptr->m_phoneVerifyCode = phoneVerifyCode;
    }
}


class SetUserPhoneNumberRsp_QtProtobufData : public QSharedData
{
public:
    SetUserPhoneNumberRsp_QtProtobufData()
        : QSharedData(),
          m_success(false)
    {
    }

    SetUserPhoneNumberRsp_QtProtobufData(const SetUserPhoneNumberRsp_QtProtobufData &other)
        : QSharedData(other),
          m_requestId(other.m_requestId),
          m_success(other.m_success),
          m_errmsg(other.m_errmsg)
    {
    }

    QString m_requestId;
    bool m_success;
    QString m_errmsg;
};

SetUserPhoneNumberRsp::~SetUserPhoneNumberRsp() = default;

static constexpr struct {
    QtProtobufPrivate::QProtobufPropertyOrdering::Data data;
    const std::array<uint, 13> qt_protobuf_SetUserPhoneNumberRsp_uint_data;
    const char qt_protobuf_SetUserPhoneNumberRsp_char_data[56];
} qt_protobuf_SetUserPhoneNumberRsp_metadata {
    // data
    {
        0, /* = version */
        3, /* = num fields */
        4, /* = field number offset */
        7, /* = property index offset */
        10, /* = field flags offset */
        29, /* = message full name length */
    },
    // uint_data
    {
        // JSON name offsets:
        30, /* = requestId */
        40, /* = success */
        48, /* = errmsg */
        55, /* = end-of-string-marker */
        // Field numbers:
        1, /* = requestId */
        2, /* = success */
        3, /* = errmsg */
        // Property indices:
        0, /* = requestId */
        1, /* = success */
        2, /* = errmsg */
        // Field flags:
        QtProtobufPrivate::NoFlags, /* = requestId */
        QtProtobufPrivate::NoFlags, /* = success */
        QtProtobufPrivate::NoFlags, /* = errmsg */
    },
    // char_data
    /* metadata char_data: */
    "bite_im.SetUserPhoneNumberRsp\0" /* = full message name */
    /* field char_data: */
    "requestId\0success\0errmsg\0"
};

const QtProtobufPrivate::QProtobufPropertyOrdering SetUserPhoneNumberRsp::propertyOrdering = {
    &qt_protobuf_SetUserPhoneNumberRsp_metadata.data
};

void SetUserPhoneNumberRsp::registerTypes()
{
    qRegisterMetaType<SetUserPhoneNumberRsp>();
    qRegisterMetaType<SetUserPhoneNumberRspRepeated>();
}

SetUserPhoneNumberRsp::SetUserPhoneNumberRsp()
    : QProtobufMessage(&SetUserPhoneNumberRsp::staticMetaObject),
      dptr(new SetUserPhoneNumberRsp_QtProtobufData)
{
}

SetUserPhoneNumberRsp::SetUserPhoneNumberRsp(const SetUserPhoneNumberRsp &other)
    : QProtobufMessage(other),
      dptr(other.dptr)
{
}
SetUserPhoneNumberRsp &SetUserPhoneNumberRsp::operator =(const SetUserPhoneNumberRsp &other)
{
    QProtobufMessage::operator=(other);
    dptr = other.dptr;
    return *this;
}
SetUserPhoneNumberRsp::SetUserPhoneNumberRsp(SetUserPhoneNumberRsp &&other) noexcept
    : QProtobufMessage(std::move(other)),
      dptr(std::move(other.dptr))
{
}
SetUserPhoneNumberRsp &SetUserPhoneNumberRsp::operator =(SetUserPhoneNumberRsp &&other) noexcept
{
    QProtobufMessage::operator=(std::move(other));
    dptr.swap(other.dptr);
    return *this;
}
bool SetUserPhoneNumberRsp::operator ==(const SetUserPhoneNumberRsp &other) const
{
    return QProtobufMessage::isEqual(*this, other)
        && dptr->m_requestId == other.dptr->m_requestId
        && dptr->m_success == other.dptr->m_success
        && dptr->m_errmsg == other.dptr->m_errmsg;
}

bool SetUserPhoneNumberRsp::operator !=(const SetUserPhoneNumberRsp &other) const
{
    return !this->operator ==(other);
}

QString SetUserPhoneNumberRsp::requestId() const
{
    return dptr->m_requestId;
}

bool SetUserPhoneNumberRsp::success() const
{
    return dptr->m_success;
}

QString SetUserPhoneNumberRsp::errmsg() const
{
    return dptr->m_errmsg;
}

void SetUserPhoneNumberRsp::setRequestId(const QString &requestId)
{
    if (dptr->m_requestId != requestId) {
        dptr.detach();
        dptr->m_requestId = requestId;
    }
}

void SetUserPhoneNumberRsp::setSuccess(const bool &success)
{
    if (dptr->m_success != success) {
        dptr.detach();
        dptr->m_success = success;
    }
}

void SetUserPhoneNumberRsp::setErrmsg(const QString &errmsg)
{
    if (dptr->m_errmsg != errmsg) {
        dptr.detach();
        dptr->m_errmsg = errmsg;
    }
}

} // namespace bite_im

#include "moc_user.qpb.cpp"
