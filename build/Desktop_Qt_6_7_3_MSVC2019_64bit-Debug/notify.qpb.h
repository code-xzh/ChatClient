/* This file is autogenerated. DO NOT CHANGE. All changes will be lost */

#ifndef QPROTOBUF_NOTIFY_H
#define QPROTOBUF_NOTIFY_H

#include <QtProtobuf/qprotobufmessage.h>
#include <QtProtobuf/qprotobufobject.h>
#include <QtProtobuf/qprotobuflazymessagepointer.h>

#include <QtCore/qbytearray.h>
#include <QtCore/qstring.h>
#include <QtProtobuf/qprotobufoneof.h>
#include <optional>
#include "base.qpb.h"

#include <QtCore/qmetatype.h>
#include <QtCore/qlist.h>
#include <QtCore/qshareddata.h>

#include <memory>


namespace bite_im {

namespace NotifyTypeGadget {
Q_NAMESPACE

enum NotifyType : int32_t {
    FRIEND_ADD_APPLY_NOTIFY = 0,
    FRIEND_ADD_PROCESS_NOTIFY = 1,
    CHAT_SESSION_CREATE_NOTIFY = 2,
    CHAT_MESSAGE_NOTIFY = 3,
    FRIEND_REMOVE_NOTIFY = 4,
};
Q_ENUM_NS(NotifyType)

using NotifyTypeRepeated = QList<NotifyType>;
void registerTypes();
} // namespace NotifyTypeGadget
class NotifyFriendAddApply;
using NotifyFriendAddApplyRepeated = QList<NotifyFriendAddApply>;
namespace NotifyFriendAddApply_QtProtobufNested {
enum class QtProtobufFieldEnum;
} // namespace NotifyFriendAddApply_QtProtobufNested

class NotifyFriendAddProcess;
using NotifyFriendAddProcessRepeated = QList<NotifyFriendAddProcess>;
namespace NotifyFriendAddProcess_QtProtobufNested {
enum class QtProtobufFieldEnum;
} // namespace NotifyFriendAddProcess_QtProtobufNested

class NotifyFriendRemove;
using NotifyFriendRemoveRepeated = QList<NotifyFriendRemove>;
namespace NotifyFriendRemove_QtProtobufNested {
enum class QtProtobufFieldEnum;
} // namespace NotifyFriendRemove_QtProtobufNested

class NotifyNewChatSession;
using NotifyNewChatSessionRepeated = QList<NotifyNewChatSession>;
namespace NotifyNewChatSession_QtProtobufNested {
enum class QtProtobufFieldEnum;
} // namespace NotifyNewChatSession_QtProtobufNested

class NotifyNewMessage;
using NotifyNewMessageRepeated = QList<NotifyNewMessage>;
namespace NotifyNewMessage_QtProtobufNested {
enum class QtProtobufFieldEnum;
} // namespace NotifyNewMessage_QtProtobufNested

class NotifyMessage;
using NotifyMessageRepeated = QList<NotifyMessage>;
namespace NotifyMessage_QtProtobufNested {
enum class QtProtobufFieldEnum;
enum class Notify_remarksFields;
} // namespace NotifyMessage_QtProtobufNested


class NotifyFriendAddApply_QtProtobufData;
class NotifyFriendAddApply : public QProtobufMessage
{
    Q_GADGET
    Q_PROTOBUF_OBJECT
    Q_DECLARE_PROTOBUF_SERIALIZERS(NotifyFriendAddApply)
    Q_PROPERTY(bite_im::UserInfo *userInfo_p READ userInfo_p WRITE setUserInfo_p SCRIPTABLE false)

public:
    using QtProtobufFieldEnum = NotifyFriendAddApply_QtProtobufNested::QtProtobufFieldEnum;
    NotifyFriendAddApply();
    ~NotifyFriendAddApply();
    NotifyFriendAddApply(const NotifyFriendAddApply &other);
    NotifyFriendAddApply &operator =(const NotifyFriendAddApply &other);
    NotifyFriendAddApply(NotifyFriendAddApply &&other) noexcept;
    NotifyFriendAddApply &operator =(NotifyFriendAddApply &&other) noexcept;
    bool operator ==(const NotifyFriendAddApply &other) const;
    bool operator !=(const NotifyFriendAddApply &other) const;

    bool hasUserInfo() const;
    UserInfo &userInfo();
    const UserInfo &userInfo() const;
    void clearUserInfo();
    void setUserInfo(const UserInfo &userInfo);
    static void registerTypes();

private:
    UserInfo *userInfo_p() const;
    void setUserInfo_p(UserInfo *userInfo);
    QExplicitlySharedDataPointer<NotifyFriendAddApply_QtProtobufData> dptr;
};
namespace NotifyFriendAddApply_QtProtobufNested {
Q_NAMESPACE

enum class QtProtobufFieldEnum {
    UserInfoProtoFieldNumber = 1,
};
Q_ENUM_NS(QtProtobufFieldEnum)

} // namespace NotifyFriendAddApply_QtProtobufNested

class NotifyFriendAddProcess_QtProtobufData;
class NotifyFriendAddProcess : public QProtobufMessage
{
    Q_GADGET
    Q_PROTOBUF_OBJECT
    Q_DECLARE_PROTOBUF_SERIALIZERS(NotifyFriendAddProcess)
    Q_PROPERTY(bool agree READ agree WRITE setAgree SCRIPTABLE true)
    Q_PROPERTY(bite_im::UserInfo *userInfo_p READ userInfo_p WRITE setUserInfo_p SCRIPTABLE false)

public:
    using QtProtobufFieldEnum = NotifyFriendAddProcess_QtProtobufNested::QtProtobufFieldEnum;
    NotifyFriendAddProcess();
    ~NotifyFriendAddProcess();
    NotifyFriendAddProcess(const NotifyFriendAddProcess &other);
    NotifyFriendAddProcess &operator =(const NotifyFriendAddProcess &other);
    NotifyFriendAddProcess(NotifyFriendAddProcess &&other) noexcept;
    NotifyFriendAddProcess &operator =(NotifyFriendAddProcess &&other) noexcept;
    bool operator ==(const NotifyFriendAddProcess &other) const;
    bool operator !=(const NotifyFriendAddProcess &other) const;

    bool agree() const;

    bool hasUserInfo() const;
    UserInfo &userInfo();
    const UserInfo &userInfo() const;
    void clearUserInfo();
    void setAgree(const bool &agree);
    void setUserInfo(const UserInfo &userInfo);
    static void registerTypes();

private:
    UserInfo *userInfo_p() const;
    void setUserInfo_p(UserInfo *userInfo);
    QExplicitlySharedDataPointer<NotifyFriendAddProcess_QtProtobufData> dptr;
};
namespace NotifyFriendAddProcess_QtProtobufNested {
Q_NAMESPACE

enum class QtProtobufFieldEnum {
    AgreeProtoFieldNumber = 1,
    UserInfoProtoFieldNumber = 2,
};
Q_ENUM_NS(QtProtobufFieldEnum)

} // namespace NotifyFriendAddProcess_QtProtobufNested

class NotifyFriendRemove_QtProtobufData;
class NotifyFriendRemove : public QProtobufMessage
{
    Q_GADGET
    Q_PROTOBUF_OBJECT
    Q_DECLARE_PROTOBUF_SERIALIZERS(NotifyFriendRemove)
    Q_PROPERTY(QString userId READ userId WRITE setUserId SCRIPTABLE true)

public:
    using QtProtobufFieldEnum = NotifyFriendRemove_QtProtobufNested::QtProtobufFieldEnum;
    NotifyFriendRemove();
    ~NotifyFriendRemove();
    NotifyFriendRemove(const NotifyFriendRemove &other);
    NotifyFriendRemove &operator =(const NotifyFriendRemove &other);
    NotifyFriendRemove(NotifyFriendRemove &&other) noexcept;
    NotifyFriendRemove &operator =(NotifyFriendRemove &&other) noexcept;
    bool operator ==(const NotifyFriendRemove &other) const;
    bool operator !=(const NotifyFriendRemove &other) const;

    QString userId() const;
    void setUserId(const QString &userId);
    static void registerTypes();

private:
    QExplicitlySharedDataPointer<NotifyFriendRemove_QtProtobufData> dptr;
};
namespace NotifyFriendRemove_QtProtobufNested {
Q_NAMESPACE

enum class QtProtobufFieldEnum {
    UserIdProtoFieldNumber = 1,
};
Q_ENUM_NS(QtProtobufFieldEnum)

} // namespace NotifyFriendRemove_QtProtobufNested

class NotifyNewChatSession_QtProtobufData;
class NotifyNewChatSession : public QProtobufMessage
{
    Q_GADGET
    Q_PROTOBUF_OBJECT
    Q_DECLARE_PROTOBUF_SERIALIZERS(NotifyNewChatSession)
    Q_PROPERTY(bite_im::ChatSessionInfo *chatSessionInfo_p READ chatSessionInfo_p WRITE setChatSessionInfo_p SCRIPTABLE false)

public:
    using QtProtobufFieldEnum = NotifyNewChatSession_QtProtobufNested::QtProtobufFieldEnum;
    NotifyNewChatSession();
    ~NotifyNewChatSession();
    NotifyNewChatSession(const NotifyNewChatSession &other);
    NotifyNewChatSession &operator =(const NotifyNewChatSession &other);
    NotifyNewChatSession(NotifyNewChatSession &&other) noexcept;
    NotifyNewChatSession &operator =(NotifyNewChatSession &&other) noexcept;
    bool operator ==(const NotifyNewChatSession &other) const;
    bool operator !=(const NotifyNewChatSession &other) const;

    bool hasChatSessionInfo() const;
    ChatSessionInfo &chatSessionInfo();
    const ChatSessionInfo &chatSessionInfo() const;
    void clearChatSessionInfo();
    void setChatSessionInfo(const ChatSessionInfo &chatSessionInfo);
    static void registerTypes();

private:
    ChatSessionInfo *chatSessionInfo_p() const;
    void setChatSessionInfo_p(ChatSessionInfo *chatSessionInfo);
    QExplicitlySharedDataPointer<NotifyNewChatSession_QtProtobufData> dptr;
};
namespace NotifyNewChatSession_QtProtobufNested {
Q_NAMESPACE

enum class QtProtobufFieldEnum {
    ChatSessionInfoProtoFieldNumber = 1,
};
Q_ENUM_NS(QtProtobufFieldEnum)

} // namespace NotifyNewChatSession_QtProtobufNested

class NotifyNewMessage_QtProtobufData;
class NotifyNewMessage : public QProtobufMessage
{
    Q_GADGET
    Q_PROTOBUF_OBJECT
    Q_DECLARE_PROTOBUF_SERIALIZERS(NotifyNewMessage)
    Q_PROPERTY(bite_im::MessageInfo *messageInfo_p READ messageInfo_p WRITE setMessageInfo_p SCRIPTABLE false)

public:
    using QtProtobufFieldEnum = NotifyNewMessage_QtProtobufNested::QtProtobufFieldEnum;
    NotifyNewMessage();
    ~NotifyNewMessage();
    NotifyNewMessage(const NotifyNewMessage &other);
    NotifyNewMessage &operator =(const NotifyNewMessage &other);
    NotifyNewMessage(NotifyNewMessage &&other) noexcept;
    NotifyNewMessage &operator =(NotifyNewMessage &&other) noexcept;
    bool operator ==(const NotifyNewMessage &other) const;
    bool operator !=(const NotifyNewMessage &other) const;

    bool hasMessageInfo() const;
    MessageInfo &messageInfo();
    const MessageInfo &messageInfo() const;
    void clearMessageInfo();
    void setMessageInfo(const MessageInfo &messageInfo);
    static void registerTypes();

private:
    MessageInfo *messageInfo_p() const;
    void setMessageInfo_p(MessageInfo *messageInfo);
    QExplicitlySharedDataPointer<NotifyNewMessage_QtProtobufData> dptr;
};
namespace NotifyNewMessage_QtProtobufNested {
Q_NAMESPACE

enum class QtProtobufFieldEnum {
    MessageInfoProtoFieldNumber = 1,
};
Q_ENUM_NS(QtProtobufFieldEnum)

} // namespace NotifyNewMessage_QtProtobufNested

class NotifyMessage_QtProtobufData;
class NotifyMessage : public QProtobufMessage
{
    Q_GADGET
    Q_PROTOBUF_OBJECT
    Q_DECLARE_PROTOBUF_SERIALIZERS(NotifyMessage)
    Q_PROPERTY(QString notifyEventId READ notifyEventId_p WRITE setNotifyEventId_p)
    Q_PROPERTY(bool hasNotifyEventId READ hasNotifyEventId)
    Q_PROPERTY(bite_im::NotifyTypeGadget::NotifyType notifyType READ notifyType WRITE setNotifyType SCRIPTABLE true)
    Q_PROPERTY(bite_im::NotifyFriendAddApply *friendAddApply_p READ friendAddApply_p WRITE setFriendAddApply_p SCRIPTABLE false)
    Q_PROPERTY(bool hasFriendAddApply READ hasFriendAddApply)
    Q_PROPERTY(bite_im::NotifyFriendAddProcess *friendProcessResult_p READ friendProcessResult_p WRITE setFriendProcessResult_p SCRIPTABLE false)
    Q_PROPERTY(bool hasFriendProcessResult READ hasFriendProcessResult)
    Q_PROPERTY(bite_im::NotifyFriendRemove *friendRemove_p READ friendRemove_p WRITE setFriendRemove_p SCRIPTABLE false)
    Q_PROPERTY(bool hasFriendRemove READ hasFriendRemove)
    Q_PROPERTY(bite_im::NotifyNewChatSession *newChatSessionInfo_p READ newChatSessionInfo_p WRITE setNewChatSessionInfo_p SCRIPTABLE false)
    Q_PROPERTY(bool hasNewChatSessionInfo READ hasNewChatSessionInfo)
    Q_PROPERTY(bite_im::NotifyNewMessage *newMessageInfo_p READ newMessageInfo_p WRITE setNewMessageInfo_p SCRIPTABLE false)
    Q_PROPERTY(bool hasNewMessageInfo READ hasNewMessageInfo)

public:
    using QtProtobufFieldEnum = NotifyMessage_QtProtobufNested::QtProtobufFieldEnum;
    using Notify_remarksFields = NotifyMessage_QtProtobufNested::Notify_remarksFields;
    NotifyMessage();
    ~NotifyMessage();
    NotifyMessage(const NotifyMessage &other);
    NotifyMessage &operator =(const NotifyMessage &other);
    NotifyMessage(NotifyMessage &&other) noexcept;
    NotifyMessage &operator =(NotifyMessage &&other) noexcept;
    bool operator ==(const NotifyMessage &other) const;
    bool operator !=(const NotifyMessage &other) const;

    bool hasNotifyEventId() const;
    QString notifyEventId() const;

    NotifyTypeGadget::NotifyType notifyType() const;

    bool hasFriendAddApply() const;
    NotifyFriendAddApply &friendAddApply() const;

    bool hasFriendProcessResult() const;
    NotifyFriendAddProcess &friendProcessResult() const;

    bool hasFriendRemove() const;
    NotifyFriendRemove &friendRemove() const;

    bool hasNewChatSessionInfo() const;
    NotifyNewChatSession &newChatSessionInfo() const;

    bool hasNewMessageInfo() const;
    NotifyNewMessage &newMessageInfo() const;
    Notify_remarksFields notify_remarksField() const;
    void setNotifyEventId(const QString &notifyEventId);
    void clearNotifyEventId();
    void setNotifyType(const NotifyTypeGadget::NotifyType &notifyType);
    void setFriendAddApply(const NotifyFriendAddApply &friendAddApply);
    void setFriendProcessResult(const NotifyFriendAddProcess &friendProcessResult);
    void setFriendRemove(const NotifyFriendRemove &friendRemove);
    void setNewChatSessionInfo(const NotifyNewChatSession &newChatSessionInfo);
    void setNewMessageInfo(const NotifyNewMessage &newMessageInfo);
    void clearNotify_remarks();
    static void registerTypes();

private:
    QString notifyEventId_p() const;
    NotifyFriendAddApply *friendAddApply_p() const;
    NotifyFriendAddProcess *friendProcessResult_p() const;
    NotifyFriendRemove *friendRemove_p() const;
    NotifyNewChatSession *newChatSessionInfo_p() const;
    NotifyNewMessage *newMessageInfo_p() const;
    void setNotifyEventId_p(QString notifyEventId);
    void setFriendAddApply_p(NotifyFriendAddApply *friendAddApply);
    void setFriendProcessResult_p(NotifyFriendAddProcess *friendProcessResult);
    void setFriendRemove_p(NotifyFriendRemove *friendRemove);
    void setNewChatSessionInfo_p(NotifyNewChatSession *newChatSessionInfo);
    void setNewMessageInfo_p(NotifyNewMessage *newMessageInfo);
    QExplicitlySharedDataPointer<NotifyMessage_QtProtobufData> dptr;
};
namespace NotifyMessage_QtProtobufNested {
Q_NAMESPACE

enum class QtProtobufFieldEnum {
    NotifyEventIdProtoFieldNumber = 1,
    NotifyTypeProtoFieldNumber = 2,
    FriendAddApplyProtoFieldNumber = 3,
    FriendProcessResultProtoFieldNumber = 4,
    FriendRemoveProtoFieldNumber = 7,
    NewChatSessionInfoProtoFieldNumber = 5,
    NewMessageInfoProtoFieldNumber = 6,
};
Q_ENUM_NS(QtProtobufFieldEnum)

enum class Notify_remarksFields {
    UninitializedField = QtProtobuf::InvalidFieldNumber,
    FriendAddApply = 3,
    FriendProcessResult = 4,
    FriendRemove = 7,
    NewChatSessionInfo = 5,
    NewMessageInfo = 6,
};
Q_ENUM_NS(Notify_remarksFields)

} // namespace NotifyMessage_QtProtobufNested
} // namespace bite_im

Q_DECLARE_METATYPE(bite_im::NotifyFriendAddApply)
Q_DECLARE_METATYPE(bite_im::NotifyFriendAddProcess)
Q_DECLARE_METATYPE(bite_im::NotifyFriendRemove)
Q_DECLARE_METATYPE(bite_im::NotifyNewChatSession)
Q_DECLARE_METATYPE(bite_im::NotifyNewMessage)
Q_DECLARE_METATYPE(bite_im::NotifyMessage)
#endif // QPROTOBUF_NOTIFY_H
