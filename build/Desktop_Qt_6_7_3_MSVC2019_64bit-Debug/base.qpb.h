/* This file is autogenerated. DO NOT CHANGE. All changes will be lost */

#ifndef QPROTOBUF_BASE_H
#define QPROTOBUF_BASE_H

#include <QtProtobuf/qprotobufmessage.h>
#include <QtProtobuf/qprotobufobject.h>
#include <QtProtobuf/qprotobuflazymessagepointer.h>

#include <QtCore/qbytearray.h>
#include <QtCore/qstring.h>
#include <QtProtobuf/qprotobufoneof.h>
#include <optional>

#include <QtCore/qmetatype.h>
#include <QtCore/qlist.h>
#include <QtCore/qshareddata.h>

#include <memory>


namespace bite_im {

namespace MessageTypeGadget {
Q_NAMESPACE

enum MessageType : int32_t {
    STRING = 0,
    IMAGE = 1,
    FILE = 2,
    SPEECH = 3,
};
Q_ENUM_NS(MessageType)

using MessageTypeRepeated = QList<MessageType>;
void registerTypes();
} // namespace MessageTypeGadget
class UserInfo;
using UserInfoRepeated = QList<UserInfo>;
namespace UserInfo_QtProtobufNested {
enum class QtProtobufFieldEnum;
} // namespace UserInfo_QtProtobufNested

class ChatSessionInfo;
using ChatSessionInfoRepeated = QList<ChatSessionInfo>;
namespace ChatSessionInfo_QtProtobufNested {
enum class QtProtobufFieldEnum;
} // namespace ChatSessionInfo_QtProtobufNested

class StringMessageInfo;
using StringMessageInfoRepeated = QList<StringMessageInfo>;
namespace StringMessageInfo_QtProtobufNested {
enum class QtProtobufFieldEnum;
} // namespace StringMessageInfo_QtProtobufNested

class ImageMessageInfo;
using ImageMessageInfoRepeated = QList<ImageMessageInfo>;
namespace ImageMessageInfo_QtProtobufNested {
enum class QtProtobufFieldEnum;
} // namespace ImageMessageInfo_QtProtobufNested

class FileMessageInfo;
using FileMessageInfoRepeated = QList<FileMessageInfo>;
namespace FileMessageInfo_QtProtobufNested {
enum class QtProtobufFieldEnum;
} // namespace FileMessageInfo_QtProtobufNested

class SpeechMessageInfo;
using SpeechMessageInfoRepeated = QList<SpeechMessageInfo>;
namespace SpeechMessageInfo_QtProtobufNested {
enum class QtProtobufFieldEnum;
} // namespace SpeechMessageInfo_QtProtobufNested

class MessageContent;
using MessageContentRepeated = QList<MessageContent>;
namespace MessageContent_QtProtobufNested {
enum class QtProtobufFieldEnum;
enum class Msg_contentFields;
} // namespace MessageContent_QtProtobufNested

class MessageInfo;
using MessageInfoRepeated = QList<MessageInfo>;
namespace MessageInfo_QtProtobufNested {
enum class QtProtobufFieldEnum;
} // namespace MessageInfo_QtProtobufNested

class Message;
using MessageRepeated = QList<Message>;
namespace Message_QtProtobufNested {
enum class QtProtobufFieldEnum;
} // namespace Message_QtProtobufNested

class FileDownloadData;
using FileDownloadDataRepeated = QList<FileDownloadData>;
namespace FileDownloadData_QtProtobufNested {
enum class QtProtobufFieldEnum;
} // namespace FileDownloadData_QtProtobufNested

class FileUploadData;
using FileUploadDataRepeated = QList<FileUploadData>;
namespace FileUploadData_QtProtobufNested {
enum class QtProtobufFieldEnum;
} // namespace FileUploadData_QtProtobufNested


class UserInfo_QtProtobufData;
class UserInfo : public QProtobufMessage
{
    Q_GADGET
    Q_PROTOBUF_OBJECT
    Q_DECLARE_PROTOBUF_SERIALIZERS(UserInfo)
    Q_PROPERTY(QString userId READ userId WRITE setUserId SCRIPTABLE true)
    Q_PROPERTY(QString nickname READ nickname WRITE setNickname SCRIPTABLE true)
    Q_PROPERTY(QString description READ description WRITE setDescription SCRIPTABLE true)
    Q_PROPERTY(QString phone READ phone WRITE setPhone SCRIPTABLE true)
    Q_PROPERTY(QByteArray avatar READ avatar WRITE setAvatar SCRIPTABLE true)

public:
    using QtProtobufFieldEnum = UserInfo_QtProtobufNested::QtProtobufFieldEnum;
    UserInfo();
    ~UserInfo();
    UserInfo(const UserInfo &other);
    UserInfo &operator =(const UserInfo &other);
    UserInfo(UserInfo &&other) noexcept;
    UserInfo &operator =(UserInfo &&other) noexcept;
    bool operator ==(const UserInfo &other) const;
    bool operator !=(const UserInfo &other) const;

    QString userId() const;

    QString nickname() const;

    QString description() const;

    QString phone() const;

    QByteArray avatar() const;
    void setUserId(const QString &userId);
    void setNickname(const QString &nickname);
    void setDescription(const QString &description);
    void setPhone(const QString &phone);
    void setAvatar(const QByteArray &avatar);
    static void registerTypes();

private:
    QExplicitlySharedDataPointer<UserInfo_QtProtobufData> dptr;
};
namespace UserInfo_QtProtobufNested {
Q_NAMESPACE

enum class QtProtobufFieldEnum {
    UserIdProtoFieldNumber = 1,
    NicknameProtoFieldNumber = 2,
    DescriptionProtoFieldNumber = 3,
    PhoneProtoFieldNumber = 4,
    AvatarProtoFieldNumber = 5,
};
Q_ENUM_NS(QtProtobufFieldEnum)

} // namespace UserInfo_QtProtobufNested

class ChatSessionInfo_QtProtobufData;
class ChatSessionInfo : public QProtobufMessage
{
    Q_GADGET
    Q_PROTOBUF_OBJECT
    Q_DECLARE_PROTOBUF_SERIALIZERS(ChatSessionInfo)
    Q_PROPERTY(QString singleChatFriendId READ singleChatFriendId_p WRITE setSingleChatFriendId_p)
    Q_PROPERTY(bool hasSingleChatFriendId READ hasSingleChatFriendId)
    Q_PROPERTY(QString chatSessionId READ chatSessionId WRITE setChatSessionId SCRIPTABLE true)
    Q_PROPERTY(QString chatSessionName READ chatSessionName WRITE setChatSessionName SCRIPTABLE true)
    Q_PROPERTY(bite_im::MessageInfo *prevMessage_p READ prevMessage_p WRITE setPrevMessage_p SCRIPTABLE false)
    Q_PROPERTY(QByteArray avatar READ avatar_p WRITE setAvatar_p)
    Q_PROPERTY(bool hasAvatar READ hasAvatar)

public:
    using QtProtobufFieldEnum = ChatSessionInfo_QtProtobufNested::QtProtobufFieldEnum;
    ChatSessionInfo();
    ~ChatSessionInfo();
    ChatSessionInfo(const ChatSessionInfo &other);
    ChatSessionInfo &operator =(const ChatSessionInfo &other);
    ChatSessionInfo(ChatSessionInfo &&other) noexcept;
    ChatSessionInfo &operator =(ChatSessionInfo &&other) noexcept;
    bool operator ==(const ChatSessionInfo &other) const;
    bool operator !=(const ChatSessionInfo &other) const;

    bool hasSingleChatFriendId() const;
    QString singleChatFriendId() const;

    QString chatSessionId() const;

    QString chatSessionName() const;

    bool hasPrevMessage() const;
    MessageInfo &prevMessage();
    const MessageInfo &prevMessage() const;
    void clearPrevMessage();

    bool hasAvatar() const;
    QByteArray avatar() const;
    void setSingleChatFriendId(const QString &singleChatFriendId);
    void clearSingleChatFriendId();
    void setChatSessionId(const QString &chatSessionId);
    void setChatSessionName(const QString &chatSessionName);
    void setPrevMessage(const MessageInfo &prevMessage);
    void setAvatar(const QByteArray &avatar);
    void clearAvatar();
    static void registerTypes();

private:
    QString singleChatFriendId_p() const;
    MessageInfo *prevMessage_p() const;
    QByteArray avatar_p() const;
    void setSingleChatFriendId_p(QString singleChatFriendId);
    void setPrevMessage_p(MessageInfo *prevMessage);
    void setAvatar_p(QByteArray avatar);
    QExplicitlySharedDataPointer<ChatSessionInfo_QtProtobufData> dptr;
};
namespace ChatSessionInfo_QtProtobufNested {
Q_NAMESPACE

enum class QtProtobufFieldEnum {
    SingleChatFriendIdProtoFieldNumber = 1,
    ChatSessionIdProtoFieldNumber = 2,
    ChatSessionNameProtoFieldNumber = 3,
    PrevMessageProtoFieldNumber = 4,
    AvatarProtoFieldNumber = 5,
};
Q_ENUM_NS(QtProtobufFieldEnum)

} // namespace ChatSessionInfo_QtProtobufNested

class StringMessageInfo_QtProtobufData;
class StringMessageInfo : public QProtobufMessage
{
    Q_GADGET
    Q_PROTOBUF_OBJECT
    Q_DECLARE_PROTOBUF_SERIALIZERS(StringMessageInfo)
    Q_PROPERTY(QString content READ content WRITE setContent SCRIPTABLE true)

public:
    using QtProtobufFieldEnum = StringMessageInfo_QtProtobufNested::QtProtobufFieldEnum;
    StringMessageInfo();
    ~StringMessageInfo();
    StringMessageInfo(const StringMessageInfo &other);
    StringMessageInfo &operator =(const StringMessageInfo &other);
    StringMessageInfo(StringMessageInfo &&other) noexcept;
    StringMessageInfo &operator =(StringMessageInfo &&other) noexcept;
    bool operator ==(const StringMessageInfo &other) const;
    bool operator !=(const StringMessageInfo &other) const;

    QString content() const;
    void setContent(const QString &content);
    static void registerTypes();

private:
    QExplicitlySharedDataPointer<StringMessageInfo_QtProtobufData> dptr;
};
namespace StringMessageInfo_QtProtobufNested {
Q_NAMESPACE

enum class QtProtobufFieldEnum {
    ContentProtoFieldNumber = 1,
};
Q_ENUM_NS(QtProtobufFieldEnum)

} // namespace StringMessageInfo_QtProtobufNested

class ImageMessageInfo_QtProtobufData;
class ImageMessageInfo : public QProtobufMessage
{
    Q_GADGET
    Q_PROTOBUF_OBJECT
    Q_DECLARE_PROTOBUF_SERIALIZERS(ImageMessageInfo)
    Q_PROPERTY(QString fileId READ fileId_p WRITE setFileId_p)
    Q_PROPERTY(bool hasFileId READ hasFileId)
    Q_PROPERTY(QByteArray imageContent READ imageContent_p WRITE setImageContent_p)
    Q_PROPERTY(bool hasImageContent READ hasImageContent)

public:
    using QtProtobufFieldEnum = ImageMessageInfo_QtProtobufNested::QtProtobufFieldEnum;
    ImageMessageInfo();
    ~ImageMessageInfo();
    ImageMessageInfo(const ImageMessageInfo &other);
    ImageMessageInfo &operator =(const ImageMessageInfo &other);
    ImageMessageInfo(ImageMessageInfo &&other) noexcept;
    ImageMessageInfo &operator =(ImageMessageInfo &&other) noexcept;
    bool operator ==(const ImageMessageInfo &other) const;
    bool operator !=(const ImageMessageInfo &other) const;

    bool hasFileId() const;
    QString fileId() const;

    bool hasImageContent() const;
    QByteArray imageContent() const;
    void setFileId(const QString &fileId);
    void clearFileId();
    void setImageContent(const QByteArray &imageContent);
    void clearImageContent();
    static void registerTypes();

private:
    QString fileId_p() const;
    QByteArray imageContent_p() const;
    void setFileId_p(QString fileId);
    void setImageContent_p(QByteArray imageContent);
    QExplicitlySharedDataPointer<ImageMessageInfo_QtProtobufData> dptr;
};
namespace ImageMessageInfo_QtProtobufNested {
Q_NAMESPACE

enum class QtProtobufFieldEnum {
    FileIdProtoFieldNumber = 1,
    ImageContentProtoFieldNumber = 2,
};
Q_ENUM_NS(QtProtobufFieldEnum)

} // namespace ImageMessageInfo_QtProtobufNested

class FileMessageInfo_QtProtobufData;
class FileMessageInfo : public QProtobufMessage
{
    Q_GADGET
    Q_PROTOBUF_OBJECT
    Q_DECLARE_PROTOBUF_SERIALIZERS(FileMessageInfo)
    Q_PROPERTY(QString fileId READ fileId_p WRITE setFileId_p)
    Q_PROPERTY(bool hasFileId READ hasFileId)
    Q_PROPERTY(QtProtobuf::int64 fileSize READ fileSize WRITE setFileSize SCRIPTABLE false)
    Q_PROPERTY(QString fileName READ fileName WRITE setFileName SCRIPTABLE true)
    Q_PROPERTY(QByteArray fileContents READ fileContents_p WRITE setFileContents_p)
    Q_PROPERTY(bool hasFileContents READ hasFileContents)

public:
    using QtProtobufFieldEnum = FileMessageInfo_QtProtobufNested::QtProtobufFieldEnum;
    FileMessageInfo();
    ~FileMessageInfo();
    FileMessageInfo(const FileMessageInfo &other);
    FileMessageInfo &operator =(const FileMessageInfo &other);
    FileMessageInfo(FileMessageInfo &&other) noexcept;
    FileMessageInfo &operator =(FileMessageInfo &&other) noexcept;
    bool operator ==(const FileMessageInfo &other) const;
    bool operator !=(const FileMessageInfo &other) const;

    bool hasFileId() const;
    QString fileId() const;

    QtProtobuf::int64 fileSize() const;

    QString fileName() const;

    bool hasFileContents() const;
    QByteArray fileContents() const;
    void setFileId(const QString &fileId);
    void clearFileId();
    void setFileSize(const QtProtobuf::int64 &fileSize);
    void setFileName(const QString &fileName);
    void setFileContents(const QByteArray &fileContents);
    void clearFileContents();
    static void registerTypes();

private:
    QString fileId_p() const;
    QByteArray fileContents_p() const;
    void setFileId_p(QString fileId);
    void setFileContents_p(QByteArray fileContents);
    QExplicitlySharedDataPointer<FileMessageInfo_QtProtobufData> dptr;
};
namespace FileMessageInfo_QtProtobufNested {
Q_NAMESPACE

enum class QtProtobufFieldEnum {
    FileIdProtoFieldNumber = 1,
    FileSizeProtoFieldNumber = 2,
    FileNameProtoFieldNumber = 3,
    FileContentsProtoFieldNumber = 4,
};
Q_ENUM_NS(QtProtobufFieldEnum)

} // namespace FileMessageInfo_QtProtobufNested

class SpeechMessageInfo_QtProtobufData;
class SpeechMessageInfo : public QProtobufMessage
{
    Q_GADGET
    Q_PROTOBUF_OBJECT
    Q_DECLARE_PROTOBUF_SERIALIZERS(SpeechMessageInfo)
    Q_PROPERTY(QString fileId READ fileId_p WRITE setFileId_p)
    Q_PROPERTY(bool hasFileId READ hasFileId)
    Q_PROPERTY(QByteArray fileContents READ fileContents_p WRITE setFileContents_p)
    Q_PROPERTY(bool hasFileContents READ hasFileContents)

public:
    using QtProtobufFieldEnum = SpeechMessageInfo_QtProtobufNested::QtProtobufFieldEnum;
    SpeechMessageInfo();
    ~SpeechMessageInfo();
    SpeechMessageInfo(const SpeechMessageInfo &other);
    SpeechMessageInfo &operator =(const SpeechMessageInfo &other);
    SpeechMessageInfo(SpeechMessageInfo &&other) noexcept;
    SpeechMessageInfo &operator =(SpeechMessageInfo &&other) noexcept;
    bool operator ==(const SpeechMessageInfo &other) const;
    bool operator !=(const SpeechMessageInfo &other) const;

    bool hasFileId() const;
    QString fileId() const;

    bool hasFileContents() const;
    QByteArray fileContents() const;
    void setFileId(const QString &fileId);
    void clearFileId();
    void setFileContents(const QByteArray &fileContents);
    void clearFileContents();
    static void registerTypes();

private:
    QString fileId_p() const;
    QByteArray fileContents_p() const;
    void setFileId_p(QString fileId);
    void setFileContents_p(QByteArray fileContents);
    QExplicitlySharedDataPointer<SpeechMessageInfo_QtProtobufData> dptr;
};
namespace SpeechMessageInfo_QtProtobufNested {
Q_NAMESPACE

enum class QtProtobufFieldEnum {
    FileIdProtoFieldNumber = 1,
    FileContentsProtoFieldNumber = 2,
};
Q_ENUM_NS(QtProtobufFieldEnum)

} // namespace SpeechMessageInfo_QtProtobufNested

class MessageContent_QtProtobufData;
class MessageContent : public QProtobufMessage
{
    Q_GADGET
    Q_PROTOBUF_OBJECT
    Q_DECLARE_PROTOBUF_SERIALIZERS(MessageContent)
    Q_PROPERTY(bite_im::MessageTypeGadget::MessageType messageType READ messageType WRITE setMessageType SCRIPTABLE true)
    Q_PROPERTY(bite_im::StringMessageInfo *stringMessage_p READ stringMessage_p WRITE setStringMessage_p SCRIPTABLE false)
    Q_PROPERTY(bool hasStringMessage READ hasStringMessage)
    Q_PROPERTY(bite_im::FileMessageInfo *fileMessage_p READ fileMessage_p WRITE setFileMessage_p SCRIPTABLE false)
    Q_PROPERTY(bool hasFileMessage READ hasFileMessage)
    Q_PROPERTY(bite_im::SpeechMessageInfo *speechMessage_p READ speechMessage_p WRITE setSpeechMessage_p SCRIPTABLE false)
    Q_PROPERTY(bool hasSpeechMessage READ hasSpeechMessage)
    Q_PROPERTY(bite_im::ImageMessageInfo *imageMessage_p READ imageMessage_p WRITE setImageMessage_p SCRIPTABLE false)
    Q_PROPERTY(bool hasImageMessage READ hasImageMessage)

public:
    using QtProtobufFieldEnum = MessageContent_QtProtobufNested::QtProtobufFieldEnum;
    using Msg_contentFields = MessageContent_QtProtobufNested::Msg_contentFields;
    MessageContent();
    ~MessageContent();
    MessageContent(const MessageContent &other);
    MessageContent &operator =(const MessageContent &other);
    MessageContent(MessageContent &&other) noexcept;
    MessageContent &operator =(MessageContent &&other) noexcept;
    bool operator ==(const MessageContent &other) const;
    bool operator !=(const MessageContent &other) const;

    MessageTypeGadget::MessageType messageType() const;

    bool hasStringMessage() const;
    StringMessageInfo &stringMessage() const;

    bool hasFileMessage() const;
    FileMessageInfo &fileMessage() const;

    bool hasSpeechMessage() const;
    SpeechMessageInfo &speechMessage() const;

    bool hasImageMessage() const;
    ImageMessageInfo &imageMessage() const;
    Msg_contentFields msg_contentField() const;
    void setMessageType(const MessageTypeGadget::MessageType &messageType);
    void setStringMessage(const StringMessageInfo &stringMessage);
    void setFileMessage(const FileMessageInfo &fileMessage);
    void setSpeechMessage(const SpeechMessageInfo &speechMessage);
    void setImageMessage(const ImageMessageInfo &imageMessage);
    void clearMsg_content();
    static void registerTypes();

private:
    StringMessageInfo *stringMessage_p() const;
    FileMessageInfo *fileMessage_p() const;
    SpeechMessageInfo *speechMessage_p() const;
    ImageMessageInfo *imageMessage_p() const;
    void setStringMessage_p(StringMessageInfo *stringMessage);
    void setFileMessage_p(FileMessageInfo *fileMessage);
    void setSpeechMessage_p(SpeechMessageInfo *speechMessage);
    void setImageMessage_p(ImageMessageInfo *imageMessage);
    QExplicitlySharedDataPointer<MessageContent_QtProtobufData> dptr;
};
namespace MessageContent_QtProtobufNested {
Q_NAMESPACE

enum class QtProtobufFieldEnum {
    MessageTypeProtoFieldNumber = 1,
    StringMessageProtoFieldNumber = 2,
    FileMessageProtoFieldNumber = 3,
    SpeechMessageProtoFieldNumber = 4,
    ImageMessageProtoFieldNumber = 5,
};
Q_ENUM_NS(QtProtobufFieldEnum)

enum class Msg_contentFields {
    UninitializedField = QtProtobuf::InvalidFieldNumber,
    StringMessage = 2,
    FileMessage = 3,
    SpeechMessage = 4,
    ImageMessage = 5,
};
Q_ENUM_NS(Msg_contentFields)

} // namespace MessageContent_QtProtobufNested

class MessageInfo_QtProtobufData;
class MessageInfo : public QProtobufMessage
{
    Q_GADGET
    Q_PROTOBUF_OBJECT
    Q_DECLARE_PROTOBUF_SERIALIZERS(MessageInfo)
    Q_PROPERTY(QString messageId READ messageId WRITE setMessageId SCRIPTABLE true)
    Q_PROPERTY(QString chatSessionId READ chatSessionId WRITE setChatSessionId SCRIPTABLE true)
    Q_PROPERTY(QtProtobuf::int64 timestamp READ timestamp WRITE setTimestamp SCRIPTABLE false)
    Q_PROPERTY(bite_im::UserInfo *sender_p READ sender_p WRITE setSender_p SCRIPTABLE false)
    Q_PROPERTY(bite_im::MessageContent *message_p READ message_p WRITE setMessage_p SCRIPTABLE false)

public:
    using QtProtobufFieldEnum = MessageInfo_QtProtobufNested::QtProtobufFieldEnum;
    MessageInfo();
    ~MessageInfo();
    MessageInfo(const MessageInfo &other);
    MessageInfo &operator =(const MessageInfo &other);
    MessageInfo(MessageInfo &&other) noexcept;
    MessageInfo &operator =(MessageInfo &&other) noexcept;
    bool operator ==(const MessageInfo &other) const;
    bool operator !=(const MessageInfo &other) const;

    QString messageId() const;

    QString chatSessionId() const;

    QtProtobuf::int64 timestamp() const;

    bool hasSender() const;
    UserInfo &sender();
    const UserInfo &sender() const;
    void clearSender();

    bool hasMessage() const;
    MessageContent &message();
    const MessageContent &message() const;
    void clearMessage();
    void setMessageId(const QString &messageId);
    void setChatSessionId(const QString &chatSessionId);
    void setTimestamp(const QtProtobuf::int64 &timestamp);
    void setSender(const UserInfo &sender);
    void setMessage(const MessageContent &message);
    static void registerTypes();

private:
    UserInfo *sender_p() const;
    MessageContent *message_p() const;
    void setSender_p(UserInfo *sender);
    void setMessage_p(MessageContent *message);
    QExplicitlySharedDataPointer<MessageInfo_QtProtobufData> dptr;
};
namespace MessageInfo_QtProtobufNested {
Q_NAMESPACE

enum class QtProtobufFieldEnum {
    MessageIdProtoFieldNumber = 1,
    ChatSessionIdProtoFieldNumber = 2,
    TimestampProtoFieldNumber = 3,
    SenderProtoFieldNumber = 4,
    MessageProtoFieldNumber = 5,
};
Q_ENUM_NS(QtProtobufFieldEnum)

} // namespace MessageInfo_QtProtobufNested

class Message_QtProtobufData;
class Message : public QProtobufMessage
{
    Q_GADGET
    Q_PROTOBUF_OBJECT
    Q_DECLARE_PROTOBUF_SERIALIZERS(Message)
    Q_PROPERTY(QString requestId READ requestId WRITE setRequestId SCRIPTABLE true)
    Q_PROPERTY(bite_im::MessageInfo *message_p READ message_p WRITE setMessage_p SCRIPTABLE false)

public:
    using QtProtobufFieldEnum = Message_QtProtobufNested::QtProtobufFieldEnum;
    Message();
    ~Message();
    Message(const Message &other);
    Message &operator =(const Message &other);
    Message(Message &&other) noexcept;
    Message &operator =(Message &&other) noexcept;
    bool operator ==(const Message &other) const;
    bool operator !=(const Message &other) const;

    QString requestId() const;

    bool hasMessage() const;
    MessageInfo &message();
    const MessageInfo &message() const;
    void clearMessage();
    void setRequestId(const QString &requestId);
    void setMessage(const MessageInfo &message);
    static void registerTypes();

private:
    MessageInfo *message_p() const;
    void setMessage_p(MessageInfo *message);
    QExplicitlySharedDataPointer<Message_QtProtobufData> dptr;
};
namespace Message_QtProtobufNested {
Q_NAMESPACE

enum class QtProtobufFieldEnum {
    RequestIdProtoFieldNumber = 1,
    MessageProtoFieldNumber = 2,
};
Q_ENUM_NS(QtProtobufFieldEnum)

} // namespace Message_QtProtobufNested

class FileDownloadData_QtProtobufData;
class FileDownloadData : public QProtobufMessage
{
    Q_GADGET
    Q_PROTOBUF_OBJECT
    Q_DECLARE_PROTOBUF_SERIALIZERS(FileDownloadData)
    Q_PROPERTY(QString fileId READ fileId WRITE setFileId SCRIPTABLE true)
    Q_PROPERTY(QByteArray fileContent READ fileContent WRITE setFileContent SCRIPTABLE true)

public:
    using QtProtobufFieldEnum = FileDownloadData_QtProtobufNested::QtProtobufFieldEnum;
    FileDownloadData();
    ~FileDownloadData();
    FileDownloadData(const FileDownloadData &other);
    FileDownloadData &operator =(const FileDownloadData &other);
    FileDownloadData(FileDownloadData &&other) noexcept;
    FileDownloadData &operator =(FileDownloadData &&other) noexcept;
    bool operator ==(const FileDownloadData &other) const;
    bool operator !=(const FileDownloadData &other) const;

    QString fileId() const;

    QByteArray fileContent() const;
    void setFileId(const QString &fileId);
    void setFileContent(const QByteArray &fileContent);
    static void registerTypes();

private:
    QExplicitlySharedDataPointer<FileDownloadData_QtProtobufData> dptr;
};
namespace FileDownloadData_QtProtobufNested {
Q_NAMESPACE

enum class QtProtobufFieldEnum {
    FileIdProtoFieldNumber = 1,
    FileContentProtoFieldNumber = 2,
};
Q_ENUM_NS(QtProtobufFieldEnum)

} // namespace FileDownloadData_QtProtobufNested

class FileUploadData_QtProtobufData;
class FileUploadData : public QProtobufMessage
{
    Q_GADGET
    Q_PROTOBUF_OBJECT
    Q_DECLARE_PROTOBUF_SERIALIZERS(FileUploadData)
    Q_PROPERTY(QString fileName READ fileName WRITE setFileName SCRIPTABLE true)
    Q_PROPERTY(QtProtobuf::int64 fileSize READ fileSize WRITE setFileSize SCRIPTABLE false)
    Q_PROPERTY(QByteArray fileContent READ fileContent WRITE setFileContent SCRIPTABLE true)

public:
    using QtProtobufFieldEnum = FileUploadData_QtProtobufNested::QtProtobufFieldEnum;
    FileUploadData();
    ~FileUploadData();
    FileUploadData(const FileUploadData &other);
    FileUploadData &operator =(const FileUploadData &other);
    FileUploadData(FileUploadData &&other) noexcept;
    FileUploadData &operator =(FileUploadData &&other) noexcept;
    bool operator ==(const FileUploadData &other) const;
    bool operator !=(const FileUploadData &other) const;

    QString fileName() const;

    QtProtobuf::int64 fileSize() const;

    QByteArray fileContent() const;
    void setFileName(const QString &fileName);
    void setFileSize(const QtProtobuf::int64 &fileSize);
    void setFileContent(const QByteArray &fileContent);
    static void registerTypes();

private:
    QExplicitlySharedDataPointer<FileUploadData_QtProtobufData> dptr;
};
namespace FileUploadData_QtProtobufNested {
Q_NAMESPACE

enum class QtProtobufFieldEnum {
    FileNameProtoFieldNumber = 1,
    FileSizeProtoFieldNumber = 2,
    FileContentProtoFieldNumber = 3,
};
Q_ENUM_NS(QtProtobufFieldEnum)

} // namespace FileUploadData_QtProtobufNested
} // namespace bite_im

Q_DECLARE_METATYPE(bite_im::UserInfo)
Q_DECLARE_METATYPE(bite_im::ChatSessionInfo)
Q_DECLARE_METATYPE(bite_im::StringMessageInfo)
Q_DECLARE_METATYPE(bite_im::ImageMessageInfo)
Q_DECLARE_METATYPE(bite_im::FileMessageInfo)
Q_DECLARE_METATYPE(bite_im::SpeechMessageInfo)
Q_DECLARE_METATYPE(bite_im::MessageContent)
Q_DECLARE_METATYPE(bite_im::MessageInfo)
Q_DECLARE_METATYPE(bite_im::Message)
Q_DECLARE_METATYPE(bite_im::FileDownloadData)
Q_DECLARE_METATYPE(bite_im::FileUploadData)
#endif // QPROTOBUF_BASE_H
