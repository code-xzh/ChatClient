/* This file is autogenerated. DO NOT CHANGE. All changes will be lost */

#ifndef QPROTOBUF_FILE_H
#define QPROTOBUF_FILE_H

#include <QtProtobuf/qprotobufmessage.h>
#include <QtProtobuf/qprotobufobject.h>
#include <QtProtobuf/qprotobuflazymessagepointer.h>

#include <QtCore/qbytearray.h>
#include <QtCore/qstring.h>
#include <QtProtobuf/qprotobufoneof.h>
#include <optional>
#include "base.qpb.h"

#include <QtCore/qmetatype.h>
#include <QtCore/qlist.h>
#include <QtCore/qshareddata.h>

#include <memory>


namespace bite_im {
class GetSingleFileReq;
using GetSingleFileReqRepeated = QList<GetSingleFileReq>;
namespace GetSingleFileReq_QtProtobufNested {
enum class QtProtobufFieldEnum;
} // namespace GetSingleFileReq_QtProtobufNested

class GetSingleFileRsp;
using GetSingleFileRspRepeated = QList<GetSingleFileRsp>;
namespace GetSingleFileRsp_QtProtobufNested {
enum class QtProtobufFieldEnum;
} // namespace GetSingleFileRsp_QtProtobufNested

class GetMultiFileReq;
using GetMultiFileReqRepeated = QList<GetMultiFileReq>;
namespace GetMultiFileReq_QtProtobufNested {
enum class QtProtobufFieldEnum;
} // namespace GetMultiFileReq_QtProtobufNested

class GetMultiFileRsp;
using GetMultiFileRspRepeated = QList<GetMultiFileRsp>;
namespace GetMultiFileRsp_QtProtobufNested {
enum class QtProtobufFieldEnum;
} // namespace GetMultiFileRsp_QtProtobufNested

class PutSingleFileReq;
using PutSingleFileReqRepeated = QList<PutSingleFileReq>;
namespace PutSingleFileReq_QtProtobufNested {
enum class QtProtobufFieldEnum;
} // namespace PutSingleFileReq_QtProtobufNested

class PutSingleFileRsp;
using PutSingleFileRspRepeated = QList<PutSingleFileRsp>;
namespace PutSingleFileRsp_QtProtobufNested {
enum class QtProtobufFieldEnum;
} // namespace PutSingleFileRsp_QtProtobufNested

class PutMultiFileReq;
using PutMultiFileReqRepeated = QList<PutMultiFileReq>;
namespace PutMultiFileReq_QtProtobufNested {
enum class QtProtobufFieldEnum;
} // namespace PutMultiFileReq_QtProtobufNested

class PutMultiFileRsp;
using PutMultiFileRspRepeated = QList<PutMultiFileRsp>;
namespace PutMultiFileRsp_QtProtobufNested {
enum class QtProtobufFieldEnum;
} // namespace PutMultiFileRsp_QtProtobufNested


class GetSingleFileReq_QtProtobufData;
class GetSingleFileReq : public QProtobufMessage
{
    Q_GADGET
    Q_PROTOBUF_OBJECT
    Q_DECLARE_PROTOBUF_SERIALIZERS(GetSingleFileReq)
    Q_PROPERTY(QString requestId READ requestId WRITE setRequestId SCRIPTABLE true)
    Q_PROPERTY(QString fileId READ fileId WRITE setFileId SCRIPTABLE true)
    Q_PROPERTY(QString userId READ userId_p WRITE setUserId_p)
    Q_PROPERTY(bool hasUserId READ hasUserId)
    Q_PROPERTY(QString sessionId READ sessionId_p WRITE setSessionId_p)
    Q_PROPERTY(bool hasSessionId READ hasSessionId)

public:
    using QtProtobufFieldEnum = GetSingleFileReq_QtProtobufNested::QtProtobufFieldEnum;
    GetSingleFileReq();
    ~GetSingleFileReq();
    GetSingleFileReq(const GetSingleFileReq &other);
    GetSingleFileReq &operator =(const GetSingleFileReq &other);
    GetSingleFileReq(GetSingleFileReq &&other) noexcept;
    GetSingleFileReq &operator =(GetSingleFileReq &&other) noexcept;
    bool operator ==(const GetSingleFileReq &other) const;
    bool operator !=(const GetSingleFileReq &other) const;

    QString requestId() const;

    QString fileId() const;

    bool hasUserId() const;
    QString userId() const;

    bool hasSessionId() const;
    QString sessionId() const;
    void setRequestId(const QString &requestId);
    void setFileId(const QString &fileId);
    void setUserId(const QString &userId);
    void clearUserId();
    void setSessionId(const QString &sessionId);
    void clearSessionId();
    static void registerTypes();

private:
    QString userId_p() const;
    QString sessionId_p() const;
    void setUserId_p(QString userId);
    void setSessionId_p(QString sessionId);
    QExplicitlySharedDataPointer<GetSingleFileReq_QtProtobufData> dptr;
};
namespace GetSingleFileReq_QtProtobufNested {
Q_NAMESPACE

enum class QtProtobufFieldEnum {
    RequestIdProtoFieldNumber = 1,
    FileIdProtoFieldNumber = 2,
    UserIdProtoFieldNumber = 3,
    SessionIdProtoFieldNumber = 4,
};
Q_ENUM_NS(QtProtobufFieldEnum)

} // namespace GetSingleFileReq_QtProtobufNested

class GetSingleFileRsp_QtProtobufData;
class GetSingleFileRsp : public QProtobufMessage
{
    Q_GADGET
    Q_PROTOBUF_OBJECT
    Q_DECLARE_PROTOBUF_SERIALIZERS(GetSingleFileRsp)
    Q_PROPERTY(QString requestId READ requestId WRITE setRequestId SCRIPTABLE true)
    Q_PROPERTY(bool success READ success WRITE setSuccess SCRIPTABLE true)
    Q_PROPERTY(QString errmsg READ errmsg WRITE setErrmsg SCRIPTABLE true)
    Q_PROPERTY(bite_im::FileDownloadData *fileData_p READ fileData_p WRITE setFileData_p SCRIPTABLE false)

public:
    using QtProtobufFieldEnum = GetSingleFileRsp_QtProtobufNested::QtProtobufFieldEnum;
    GetSingleFileRsp();
    ~GetSingleFileRsp();
    GetSingleFileRsp(const GetSingleFileRsp &other);
    GetSingleFileRsp &operator =(const GetSingleFileRsp &other);
    GetSingleFileRsp(GetSingleFileRsp &&other) noexcept;
    GetSingleFileRsp &operator =(GetSingleFileRsp &&other) noexcept;
    bool operator ==(const GetSingleFileRsp &other) const;
    bool operator !=(const GetSingleFileRsp &other) const;

    QString requestId() const;

    bool success() const;

    QString errmsg() const;

    bool hasFileData() const;
    FileDownloadData &fileData();
    const FileDownloadData &fileData() const;
    void clearFileData();
    void setRequestId(const QString &requestId);
    void setSuccess(const bool &success);
    void setErrmsg(const QString &errmsg);
    void setFileData(const FileDownloadData &fileData);
    static void registerTypes();

private:
    FileDownloadData *fileData_p() const;
    void setFileData_p(FileDownloadData *fileData);
    QExplicitlySharedDataPointer<GetSingleFileRsp_QtProtobufData> dptr;
};
namespace GetSingleFileRsp_QtProtobufNested {
Q_NAMESPACE

enum class QtProtobufFieldEnum {
    RequestIdProtoFieldNumber = 1,
    SuccessProtoFieldNumber = 2,
    ErrmsgProtoFieldNumber = 3,
    FileDataProtoFieldNumber = 4,
};
Q_ENUM_NS(QtProtobufFieldEnum)

} // namespace GetSingleFileRsp_QtProtobufNested

class GetMultiFileReq_QtProtobufData;
class GetMultiFileReq : public QProtobufMessage
{
    Q_GADGET
    Q_PROTOBUF_OBJECT
    Q_DECLARE_PROTOBUF_SERIALIZERS(GetMultiFileReq)
    Q_PROPERTY(QString requestId READ requestId WRITE setRequestId SCRIPTABLE true)
    Q_PROPERTY(QString userId READ userId_p WRITE setUserId_p)
    Q_PROPERTY(bool hasUserId READ hasUserId)
    Q_PROPERTY(QString sessionId READ sessionId_p WRITE setSessionId_p)
    Q_PROPERTY(bool hasSessionId READ hasSessionId)
    Q_PROPERTY(QStringList fileIdList READ fileIdList WRITE setFileIdList SCRIPTABLE true)

public:
    using QtProtobufFieldEnum = GetMultiFileReq_QtProtobufNested::QtProtobufFieldEnum;
    GetMultiFileReq();
    ~GetMultiFileReq();
    GetMultiFileReq(const GetMultiFileReq &other);
    GetMultiFileReq &operator =(const GetMultiFileReq &other);
    GetMultiFileReq(GetMultiFileReq &&other) noexcept;
    GetMultiFileReq &operator =(GetMultiFileReq &&other) noexcept;
    bool operator ==(const GetMultiFileReq &other) const;
    bool operator !=(const GetMultiFileReq &other) const;

    QString requestId() const;

    bool hasUserId() const;
    QString userId() const;

    bool hasSessionId() const;
    QString sessionId() const;

    QStringList fileIdList() const;
    QStringList &fileIdList();
    void setRequestId(const QString &requestId);
    void setUserId(const QString &userId);
    void clearUserId();
    void setSessionId(const QString &sessionId);
    void clearSessionId();
    void setFileIdList(const QStringList &fileIdList);
    static void registerTypes();

private:
    QString userId_p() const;
    QString sessionId_p() const;
    void setUserId_p(QString userId);
    void setSessionId_p(QString sessionId);
    QExplicitlySharedDataPointer<GetMultiFileReq_QtProtobufData> dptr;
};
namespace GetMultiFileReq_QtProtobufNested {
Q_NAMESPACE

enum class QtProtobufFieldEnum {
    RequestIdProtoFieldNumber = 1,
    UserIdProtoFieldNumber = 2,
    SessionIdProtoFieldNumber = 3,
    FileIdListProtoFieldNumber = 4,
};
Q_ENUM_NS(QtProtobufFieldEnum)

} // namespace GetMultiFileReq_QtProtobufNested

class GetMultiFileRsp_QtProtobufData;
class GetMultiFileRsp : public QProtobufMessage
{
    Q_GADGET
    Q_PROTOBUF_OBJECT
    Q_DECLARE_PROTOBUF_SERIALIZERS(GetMultiFileRsp)
    Q_PROPERTY(QString requestId READ requestId WRITE setRequestId SCRIPTABLE true)
    Q_PROPERTY(bool success READ success WRITE setSuccess SCRIPTABLE true)
    Q_PROPERTY(QString errmsg READ errmsg WRITE setErrmsg SCRIPTABLE true)
    Q_PROPERTY(bite_im::FileDownloadDataRepeated fileDataData READ fileData WRITE setFileData SCRIPTABLE true)

public:
    using QtProtobufFieldEnum = GetMultiFileRsp_QtProtobufNested::QtProtobufFieldEnum;
    GetMultiFileRsp();
    ~GetMultiFileRsp();
    GetMultiFileRsp(const GetMultiFileRsp &other);
    GetMultiFileRsp &operator =(const GetMultiFileRsp &other);
    GetMultiFileRsp(GetMultiFileRsp &&other) noexcept;
    GetMultiFileRsp &operator =(GetMultiFileRsp &&other) noexcept;
    bool operator ==(const GetMultiFileRsp &other) const;
    bool operator !=(const GetMultiFileRsp &other) const;

    QString requestId() const;

    bool success() const;

    QString errmsg() const;

    FileDownloadDataRepeated fileData() const;
    FileDownloadDataRepeated &fileData();
    void setRequestId(const QString &requestId);
    void setSuccess(const bool &success);
    void setErrmsg(const QString &errmsg);
    void setFileData(const FileDownloadDataRepeated &fileData);
    static void registerTypes();

private:
    QExplicitlySharedDataPointer<GetMultiFileRsp_QtProtobufData> dptr;
};
namespace GetMultiFileRsp_QtProtobufNested {
Q_NAMESPACE

enum class QtProtobufFieldEnum {
    RequestIdProtoFieldNumber = 1,
    SuccessProtoFieldNumber = 2,
    ErrmsgProtoFieldNumber = 3,
    FileDataProtoFieldNumber = 4,
};
Q_ENUM_NS(QtProtobufFieldEnum)

} // namespace GetMultiFileRsp_QtProtobufNested

class PutSingleFileReq_QtProtobufData;
class PutSingleFileReq : public QProtobufMessage
{
    Q_GADGET
    Q_PROTOBUF_OBJECT
    Q_DECLARE_PROTOBUF_SERIALIZERS(PutSingleFileReq)
    Q_PROPERTY(QString requestId READ requestId WRITE setRequestId SCRIPTABLE true)
    Q_PROPERTY(QString userId READ userId_p WRITE setUserId_p)
    Q_PROPERTY(bool hasUserId READ hasUserId)
    Q_PROPERTY(QString sessionId READ sessionId_p WRITE setSessionId_p)
    Q_PROPERTY(bool hasSessionId READ hasSessionId)
    Q_PROPERTY(bite_im::FileUploadData *fileData_p READ fileData_p WRITE setFileData_p SCRIPTABLE false)

public:
    using QtProtobufFieldEnum = PutSingleFileReq_QtProtobufNested::QtProtobufFieldEnum;
    PutSingleFileReq();
    ~PutSingleFileReq();
    PutSingleFileReq(const PutSingleFileReq &other);
    PutSingleFileReq &operator =(const PutSingleFileReq &other);
    PutSingleFileReq(PutSingleFileReq &&other) noexcept;
    PutSingleFileReq &operator =(PutSingleFileReq &&other) noexcept;
    bool operator ==(const PutSingleFileReq &other) const;
    bool operator !=(const PutSingleFileReq &other) const;

    QString requestId() const;

    bool hasUserId() const;
    QString userId() const;

    bool hasSessionId() const;
    QString sessionId() const;

    bool hasFileData() const;
    FileUploadData &fileData();
    const FileUploadData &fileData() const;
    void clearFileData();
    void setRequestId(const QString &requestId);
    void setUserId(const QString &userId);
    void clearUserId();
    void setSessionId(const QString &sessionId);
    void clearSessionId();
    void setFileData(const FileUploadData &fileData);
    static void registerTypes();

private:
    QString userId_p() const;
    QString sessionId_p() const;
    FileUploadData *fileData_p() const;
    void setUserId_p(QString userId);
    void setSessionId_p(QString sessionId);
    void setFileData_p(FileUploadData *fileData);
    QExplicitlySharedDataPointer<PutSingleFileReq_QtProtobufData> dptr;
};
namespace PutSingleFileReq_QtProtobufNested {
Q_NAMESPACE

enum class QtProtobufFieldEnum {
    RequestIdProtoFieldNumber = 1,
    UserIdProtoFieldNumber = 2,
    SessionIdProtoFieldNumber = 3,
    FileDataProtoFieldNumber = 4,
};
Q_ENUM_NS(QtProtobufFieldEnum)

} // namespace PutSingleFileReq_QtProtobufNested

class PutSingleFileRsp_QtProtobufData;
class PutSingleFileRsp : public QProtobufMessage
{
    Q_GADGET
    Q_PROTOBUF_OBJECT
    Q_DECLARE_PROTOBUF_SERIALIZERS(PutSingleFileRsp)
    Q_PROPERTY(QString requestId READ requestId WRITE setRequestId SCRIPTABLE true)
    Q_PROPERTY(bool success READ success WRITE setSuccess SCRIPTABLE true)
    Q_PROPERTY(QString errmsg READ errmsg WRITE setErrmsg SCRIPTABLE true)
    Q_PROPERTY(bite_im::FileMessageInfo *fileInfo_p READ fileInfo_p WRITE setFileInfo_p SCRIPTABLE false)

public:
    using QtProtobufFieldEnum = PutSingleFileRsp_QtProtobufNested::QtProtobufFieldEnum;
    PutSingleFileRsp();
    ~PutSingleFileRsp();
    PutSingleFileRsp(const PutSingleFileRsp &other);
    PutSingleFileRsp &operator =(const PutSingleFileRsp &other);
    PutSingleFileRsp(PutSingleFileRsp &&other) noexcept;
    PutSingleFileRsp &operator =(PutSingleFileRsp &&other) noexcept;
    bool operator ==(const PutSingleFileRsp &other) const;
    bool operator !=(const PutSingleFileRsp &other) const;

    QString requestId() const;

    bool success() const;

    QString errmsg() const;

    bool hasFileInfo() const;
    FileMessageInfo &fileInfo();
    const FileMessageInfo &fileInfo() const;
    void clearFileInfo();
    void setRequestId(const QString &requestId);
    void setSuccess(const bool &success);
    void setErrmsg(const QString &errmsg);
    void setFileInfo(const FileMessageInfo &fileInfo);
    static void registerTypes();

private:
    FileMessageInfo *fileInfo_p() const;
    void setFileInfo_p(FileMessageInfo *fileInfo);
    QExplicitlySharedDataPointer<PutSingleFileRsp_QtProtobufData> dptr;
};
namespace PutSingleFileRsp_QtProtobufNested {
Q_NAMESPACE

enum class QtProtobufFieldEnum {
    RequestIdProtoFieldNumber = 1,
    SuccessProtoFieldNumber = 2,
    ErrmsgProtoFieldNumber = 3,
    FileInfoProtoFieldNumber = 4,
};
Q_ENUM_NS(QtProtobufFieldEnum)

} // namespace PutSingleFileRsp_QtProtobufNested

class PutMultiFileReq_QtProtobufData;
class PutMultiFileReq : public QProtobufMessage
{
    Q_GADGET
    Q_PROTOBUF_OBJECT
    Q_DECLARE_PROTOBUF_SERIALIZERS(PutMultiFileReq)
    Q_PROPERTY(QString requestId READ requestId WRITE setRequestId SCRIPTABLE true)
    Q_PROPERTY(QString userId READ userId_p WRITE setUserId_p)
    Q_PROPERTY(bool hasUserId READ hasUserId)
    Q_PROPERTY(QString sessionId READ sessionId_p WRITE setSessionId_p)
    Q_PROPERTY(bool hasSessionId READ hasSessionId)
    Q_PROPERTY(bite_im::FileUploadDataRepeated fileDataData READ fileData WRITE setFileData SCRIPTABLE true)

public:
    using QtProtobufFieldEnum = PutMultiFileReq_QtProtobufNested::QtProtobufFieldEnum;
    PutMultiFileReq();
    ~PutMultiFileReq();
    PutMultiFileReq(const PutMultiFileReq &other);
    PutMultiFileReq &operator =(const PutMultiFileReq &other);
    PutMultiFileReq(PutMultiFileReq &&other) noexcept;
    PutMultiFileReq &operator =(PutMultiFileReq &&other) noexcept;
    bool operator ==(const PutMultiFileReq &other) const;
    bool operator !=(const PutMultiFileReq &other) const;

    QString requestId() const;

    bool hasUserId() const;
    QString userId() const;

    bool hasSessionId() const;
    QString sessionId() const;

    FileUploadDataRepeated fileData() const;
    FileUploadDataRepeated &fileData();
    void setRequestId(const QString &requestId);
    void setUserId(const QString &userId);
    void clearUserId();
    void setSessionId(const QString &sessionId);
    void clearSessionId();
    void setFileData(const FileUploadDataRepeated &fileData);
    static void registerTypes();

private:
    QString userId_p() const;
    QString sessionId_p() const;
    void setUserId_p(QString userId);
    void setSessionId_p(QString sessionId);
    QExplicitlySharedDataPointer<PutMultiFileReq_QtProtobufData> dptr;
};
namespace PutMultiFileReq_QtProtobufNested {
Q_NAMESPACE

enum class QtProtobufFieldEnum {
    RequestIdProtoFieldNumber = 1,
    UserIdProtoFieldNumber = 2,
    SessionIdProtoFieldNumber = 3,
    FileDataProtoFieldNumber = 4,
};
Q_ENUM_NS(QtProtobufFieldEnum)

} // namespace PutMultiFileReq_QtProtobufNested

class PutMultiFileRsp_QtProtobufData;
class PutMultiFileRsp : public QProtobufMessage
{
    Q_GADGET
    Q_PROTOBUF_OBJECT
    Q_DECLARE_PROTOBUF_SERIALIZERS(PutMultiFileRsp)
    Q_PROPERTY(QString requestId READ requestId WRITE setRequestId SCRIPTABLE true)
    Q_PROPERTY(bool success READ success WRITE setSuccess SCRIPTABLE true)
    Q_PROPERTY(QString errmsg READ errmsg WRITE setErrmsg SCRIPTABLE true)
    Q_PROPERTY(bite_im::FileMessageInfoRepeated fileInfoData READ fileInfo WRITE setFileInfo SCRIPTABLE true)

public:
    using QtProtobufFieldEnum = PutMultiFileRsp_QtProtobufNested::QtProtobufFieldEnum;
    PutMultiFileRsp();
    ~PutMultiFileRsp();
    PutMultiFileRsp(const PutMultiFileRsp &other);
    PutMultiFileRsp &operator =(const PutMultiFileRsp &other);
    PutMultiFileRsp(PutMultiFileRsp &&other) noexcept;
    PutMultiFileRsp &operator =(PutMultiFileRsp &&other) noexcept;
    bool operator ==(const PutMultiFileRsp &other) const;
    bool operator !=(const PutMultiFileRsp &other) const;

    QString requestId() const;

    bool success() const;

    QString errmsg() const;

    FileMessageInfoRepeated fileInfo() const;
    FileMessageInfoRepeated &fileInfo();
    void setRequestId(const QString &requestId);
    void setSuccess(const bool &success);
    void setErrmsg(const QString &errmsg);
    void setFileInfo(const FileMessageInfoRepeated &fileInfo);
    static void registerTypes();

private:
    QExplicitlySharedDataPointer<PutMultiFileRsp_QtProtobufData> dptr;
};
namespace PutMultiFileRsp_QtProtobufNested {
Q_NAMESPACE

enum class QtProtobufFieldEnum {
    RequestIdProtoFieldNumber = 1,
    SuccessProtoFieldNumber = 2,
    ErrmsgProtoFieldNumber = 3,
    FileInfoProtoFieldNumber = 4,
};
Q_ENUM_NS(QtProtobufFieldEnum)

} // namespace PutMultiFileRsp_QtProtobufNested
} // namespace bite_im

Q_DECLARE_METATYPE(bite_im::GetSingleFileReq)
Q_DECLARE_METATYPE(bite_im::GetSingleFileRsp)
Q_DECLARE_METATYPE(bite_im::GetMultiFileReq)
Q_DECLARE_METATYPE(bite_im::GetMultiFileRsp)
Q_DECLARE_METATYPE(bite_im::PutSingleFileReq)
Q_DECLARE_METATYPE(bite_im::PutSingleFileRsp)
Q_DECLARE_METATYPE(bite_im::PutMultiFileReq)
Q_DECLARE_METATYPE(bite_im::PutMultiFileRsp)
#endif // QPROTOBUF_FILE_H
